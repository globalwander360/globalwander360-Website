Great! For Day 3: Goods Registration (without test code), here's the updated structure and full source code for your Spring Boot backend.


---

Day 3 - Folder Structure (Backend)

src/main/java/com/example/inventory
├── controller
│   └── GoodsController.java
├── dto
│   └── GoodsDTO.java
├── entity
│   ├── Category.java
│   ├── Goods.java
│   └── User.java
├── mapper
│   ├── CategoryMapper.java
│   └── GoodsMapper.java
├── repository
│   ├── CategoryRepository.java
│   └── GoodsRepository.java
├── service
│   ├── GoodsService.java
│   └── impl
│       └── GoodsServiceImpl.java
└── InventoryManagementApplication.java


---

1. GoodsDTO.java

package com.example.inventory.dto;

import lombok.Data;

import java.math.BigDecimal;
import java.time.LocalDate;

@Data
public class GoodsDTO {
    private Long id;
    private String name;
    private Integer quantity;
    private String unitOfMeasure;
    private String location;
    private LocalDate expiryDate;
    private LocalDate acquisitionDate;
    private Integer minimumStockLevel;
    private BigDecimal price;
    private String supplier;
    private String status;
    private Long userId;
    private Long categoryId;
}


---

2. Goods.java

package com.example.inventory.entity;

import jakarta.persistence.*;
import lombok.*;

import java.math.BigDecimal;
import java.time.LocalDate;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Goods {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private Integer quantity;
    private String unitOfMeasure;
    private String location;
    private LocalDate expiryDate;
    private LocalDate acquisitionDate;
    private Integer minimumStockLevel;
    private BigDecimal price;
    private String supplier;
    private String status;

    @ManyToOne
    @JoinColumn(name = "user_id")
    private User user;

    @ManyToOne
    @JoinColumn(name = "category_id")
    private Category category;
}


---

3. GoodsRepository.java

package com.example.inventory.repository;

import com.example.inventory.entity.Goods;
import org.springframework.data.jpa.repository.JpaRepository;

public interface GoodsRepository extends JpaRepository<Goods, Long> {
}


---

4. GoodsMapper.java

package com.example.inventory.mapper;

import com.example.inventory.dto.GoodsDTO;
import com.example.inventory.entity.Category;
import com.example.inventory.entity.Goods;
import com.example.inventory.entity.User;
import org.springframework.stereotype.Component;

@Component
public class GoodsMapper {

    public Goods toEntity(GoodsDTO dto, User user, Category category) {
        Goods goods = new Goods();
        goods.setId(dto.getId());
        goods.setName(dto.getName());
        goods.setQuantity(dto.getQuantity());
        goods.setUnitOfMeasure(dto.getUnitOfMeasure());
        goods.setLocation(dto.getLocation());
        goods.setExpiryDate(dto.getExpiryDate());
        goods.setAcquisitionDate(dto.getAcquisitionDate());
        goods.setMinimumStockLevel(dto.getMinimumStockLevel());
        goods.setPrice(dto.getPrice());
        goods.setSupplier(dto.getSupplier());
        goods.setStatus(dto.getStatus());
        goods.setUser(user);
        goods.setCategory(category);
        return goods;
    }
}


---

5. CategoryMapper.java

package com.example.inventory.mapper;

import com.example.inventory.entity.Category;
import org.springframework.stereotype.Component;

@Component
public class CategoryMapper {
    public Category toEntity(Long id) {
        Category category = new Category();
        category.setId(id);
        return category;
    }
}


---

6. GoodsService.java

package com.example.inventory.service;

import com.example.inventory.dto.GoodsDTO;

public interface GoodsService {
    void registerGoods(GoodsDTO dto);
}


---

7. GoodsServiceImpl.java

package com.example.inventory.service.impl;

import com.example.inventory.dto.GoodsDTO;
import com.example.inventory.entity.Category;
import com.example.inventory.entity.Goods;
import com.example.inventory.entity.User;
import com.example.inventory.mapper.GoodsMapper;
import com.example.inventory.repository.CategoryRepository;
import com.example.inventory.repository.GoodsRepository;
import com.example.inventory.repository.UserRepository;
import com.example.inventory.service.GoodsService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class GoodsServiceImpl implements GoodsService {

    private final GoodsRepository goodsRepository;
    private final UserRepository userRepository;
    private final CategoryRepository categoryRepository;
    private final GoodsMapper goodsMapper;

    @Override
    public void registerGoods(GoodsDTO dto) {
        User user = userRepository.findById(dto.getUserId()).orElseThrow();
        Category category = categoryRepository.findById(dto.getCategoryId()).orElseThrow();
        Goods goods = goodsMapper.toEntity(dto, user, category);
        goodsRepository.save(goods);
    }
}


---

8. GoodsController.java

package com.example.inventory.controller;

import com.example.inventory.dto.GoodsDTO;
import com.example.inventory.service.GoodsService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/goods")
@RequiredArgsConstructor
public class GoodsController {

    private final GoodsService goodsService;

    @PostMapping
    public ResponseEntity<String> registerGoods(@RequestBody GoodsDTO dto) {
        goodsService.registerGoods(dto);
        return ResponseEntity.ok("Goods registered successfully");
    }
}


---

If you're ready, I can also generate the Liquibase XML file for Day 3 to match the above structure. Let me know if you want that.

