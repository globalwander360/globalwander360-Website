1. CategoryMapper (missing piece)


2. Fixes in:

GoodsMapper (for getExpiryDate, getAcquisitionDate, getPrice)

GoodsService (add toEntity, findById)

Test class fixes (mock, when, findById, assertEquals, getArgument)





---

1. CategoryMapper.java

package com.example.inventory.mapper;

import com.example.inventory.dto.CategoryDTO;
import com.example.inventory.entity.Category;
import org.springframework.stereotype.Component;

@Component
public class CategoryMapper {

    public CategoryDTO toDto(Category category) {
        if (category == null) return null;
        CategoryDTO dto = new CategoryDTO();
        dto.setId(category.getId());
        dto.setName(category.getName());
        dto.setDescription(category.getDescription());
        dto.setStorageRequirements(category.getStorageRequirements());
        dto.setIsPerishable(category.getIsPerishable());
        dto.setShelfLife(category.getShelfLife());
        return dto;
    }

    public Category toEntity(CategoryDTO dto) {
        if (dto == null) return null;
        Category category = new Category();
        category.setId(dto.getId());
        category.setName(dto.getName());
        category.setDescription(dto.getDescription());
        category.setStorageRequirements(dto.getStorageRequirements());
        category.setIsPerishable(dto.getIsPerishable());
        category.setShelfLife(dto.getShelfLife());
        return category;
    }
}


---

2. Fix GoodsMapper.java

Make sure your entity class has proper getters: getExpiryDate(), getAcquisitionDate(), getPrice().

If not, update your Goods entity or adjust the GoodsMapper like this:

public GoodsDTO toDto(Goods goods) {
    if (goods == null) return null;
    GoodsDTO dto = new GoodsDTO();
    dto.setId(goods.getId());
    dto.setName(goods.getName());
    dto.setQuantity(goods.getQuantity());
    dto.setUnitOfMeasure(goods.getUnitOfMeasure());
    dto.setLocation(goods.getLocation());
    dto.setExpiryDate(goods.getExpiryDate());
    dto.setAcquisitionDate(goods.getAcquisitionDate());
    dto.setMinimumStockLevel(goods.getMinimumStockLevel());
    dto.setPrice(goods.getPrice());
    dto.setSupplier(goods.getSupplier());
    dto.setStatus(goods.getStatus());
    // Map category/user if needed
    return dto;
}

If you're getting errors, check:

Entity imports (java.time.LocalDate, BigDecimal)

Whether @Getter/@Setter from Lombok is missing or manually written incorrectly



---

3. Fix GoodsService.java

Add toEntity method inside GoodsMapper if missing:

public Goods toEntity(GoodsDTO dto) {
    if (dto == null) return null;
    Goods goods = new Goods();
    goods.setId(dto.getId());
    goods.setName(dto.getName());
    goods.setQuantity(dto.getQuantity());
    goods.setUnitOfMeasure(dto.getUnitOfMeasure());
    goods.setLocation(dto.getLocation());
    goods.setExpiryDate(dto.getExpiryDate());
    goods.setAcquisitionDate(dto.getAcquisitionDate());
    goods.setMinimumStockLevel(dto.getMinimumStockLevel());
    goods.setPrice(dto.getPrice());
    goods.setSupplier(dto.getSupplier());
    goods.setStatus(dto.getStatus());
    return goods;
}

Add findById logic in GoodsService:

public GoodsDTO findById(Long id) {
    Goods goods = goodsRepository.findById(id)
        .orElseThrow(() -> new RuntimeException("Goods not found with id: " + id));
    return goodsMapper.toDto(goods);
}


---

4. Fix Unit Test Issues

Import this in your test class:

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

Sample usage:

@Test
void testFindById() {
    Goods goods = new Goods();
    goods.setId(1L);
    when(goodsRepository.findById(1L)).thenReturn(Optional.of(goods));

    GoodsDTO dto = goodsService.findById(1L);
    assertEquals(1L, dto.getId());

    verify(goodsRepository).findById(1L);
}

Mock setup:

@Mock
private GoodsRepository goodsRepository;

@InjectMocks
private GoodsService goodsService;

@BeforeEach
void setup() {
    MockitoAnnotations.openMocks(this);
}


---

Let me know if you want:

Updated test class with these changes

Next step (Day 4, maybe?)

Any specific file zipped/shared as one folder


Ready when you are.

