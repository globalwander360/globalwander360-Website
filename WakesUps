Sure! Here's the complete updated backend code for the Category section, including the new user-accessible API for category creation:


---

1. CategoryController.java

package com.yourapp.controller;

import com.yourapp.dto.CategoryDto;
import com.yourapp.service.CategoryService;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/categories")
@RequiredArgsConstructor
public class CategoryController {

    private final CategoryService service;

    // Admin or general category creation
    @PostMapping
    public CategoryDto create(@RequestBody CategoryDto dto) {
        return service.create(dto);
    }

    // User-specific category creation
    @PostMapping("/user")
    public CategoryDto createCategoryByUser(@RequestBody CategoryDto dto) {
        return service.create(dto);
    }

    @PutMapping("/{id}")
    public CategoryDto update(@PathVariable Long id, @RequestBody CategoryDto dto) {
        return service.update(id, dto);
    }

    @GetMapping("/{id}")
    public CategoryDto getById(@PathVariable Long id) {
        return service.getById(id);
    }

    @GetMapping
    public List<CategoryDto> getAll() {
        return service.getAll();
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) {
        service.delete(id);
    }
}


---

2. CategoryService.java

package com.yourapp.service;

import com.yourapp.dto.CategoryDto;
import com.yourapp.entity.Category;
import com.yourapp.repository.CategoryRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class CategoryService {

    private final CategoryRepository repository;

    public CategoryDto create(CategoryDto dto) {
        Category category = new Category();
        category.setName(dto.getName());
        return mapToDto(repository.save(category));
    }

    public CategoryDto update(Long id, CategoryDto dto) {
        Category category = repository.findById(id).orElseThrow();
        category.setName(dto.getName());
        return mapToDto(repository.save(category));
    }

    public CategoryDto getById(Long id) {
        Category category = repository.findById(id).orElseThrow();
        return mapToDto(category);
    }

    public List<CategoryDto> getAll() {
        return repository.findAll()
                .stream()
                .map(this::mapToDto)
                .collect(Collectors.toList());
    }

    public void delete(Long id) {
        repository.deleteById(id);
    }

    private CategoryDto mapToDto(Category category) {
        CategoryDto dto = new CategoryDto();
        dto.setId(category.getId());
        dto.setName(category.getName());
        return dto;
    }
}


---

3. CategoryDto.java

package com.yourapp.dto;

import lombok.Data;

@Data
public class CategoryDto {
    private Long id;
    private String name;
}


---

4. Category.java (Entity)

package com.yourapp.entity;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "category")
public class Category {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
}


---

5. CategoryRepository.java

package com.yourapp.repository;

import com.yourapp.entity.Category;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CategoryRepository extends JpaRepository<Category, Long> {
}


---

Let me know if you need:

Liquibase changelog for category table

Role-based access control (for admin/user separation)

Frontend integration using Angular form for users


I can also generate mock data for categories if needed.



Here’s some mock category data you can use — either for testing your API or preloading into your database (e.g., via Liquibase or manual SQL insert):


---

Sample JSON Array (for frontend testing / API testing)

[
  { "name": "Electronics" },
  { "name": "Books" },
  { "name": "Fashion" },
  { "name": "Home Appliances" },
  { "name": "Sports & Fitness" },
  { "name": "Groceries" },
  { "name": "Beauty & Personal Care" },
  { "name": "Automobile" },
  { "name": "Toys" },
  { "name": "Furniture" }
]

You can use these JSON objects with a POST request to /api/categories/user or /api/categories.


---

Optional: Liquibase Changelog Mock Data (category-data.xml)

<changeSet id="insert-categories" author="yourname">
    <insert tableName="category">
        <column name="name" value="Electronics"/>
    </insert>
    <insert tableName="category">
        <column name="name" value="Books"/>
    </insert>
    <insert tableName="category">
        <column name="name" value="Fashion"/>
    </insert>
    <insert tableName="category">
        <column name="name" value="Home Appliances"/>
    </insert>
    <insert tableName="category">
        <column name="name" value="Sports & Fitness"/>
    </insert>
    <insert tableName="category">
        <column name="name" value="Groceries"/>
    </insert>
    <insert tableName="category">
        <column name="name" value="Beauty & Personal Care"/>
    </insert>
    <insert tableName="category">
        <column name="name" value="Automobile"/>
    </insert>
    <insert tableName="category">
        <column name="name" value="Toys"/>
    </insert>
    <insert tableName="category">
        <column name="name" value="Furniture"/>
    </insert>
</changeSet>

Add this changelog to your main master.xml or db.changelog-master.xml like this:

<include file="classpath:db/changelog/category-data.xml"/>


---

Want me to generate the goods form dropdown using this mock data next?

