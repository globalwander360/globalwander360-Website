Thanks! Based on your provided Goods entity structure, here's the complete updated backend code for Goods registration including the Entity, DTO, Mapper, Service, Repository, and Controller—plus the sample JSON payload for API testing.


---

1. Goods.java (Entity)

package com.yourapp.entity;

import jakarta.persistence.*;
import lombok.*;
import java.time.LocalDate;

@Entity
@Table(name = "goods")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Goods {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private Integer quantity;

    @Column(name = "unit_of_measure")
    private String unitOfMeasure;

    private String location;

    @Column(name = "expiry_date")
    private LocalDate expiryDate;

    @Column(name = "acquisition_date")
    private LocalDate acquisitionDate;

    @Column(name = "minimum_stock_level")
    private Integer minimumStockLevel;

    private Double price;
    private String supplier;
    private String status;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id")
    private AppUser user;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "category_id")
    private Category category;
}


---

2. GoodsDto.java

package com.yourapp.dto;

import lombok.Data;
import java.time.LocalDate;

@Data
public class GoodsDto {
    private Long id;
    private String name;
    private Integer quantity;
    private String unitOfMeasure;
    private String location;
    private LocalDate expiryDate;
    private LocalDate acquisitionDate;
    private Integer minimumStockLevel;
    private Double price;
    private String supplier;
    private String status;
    private Long userId;
    private Long categoryId;
}


---

3. GoodsMapper.java

package com.yourapp.mapper;

import com.yourapp.dto.GoodsDto;
import com.yourapp.entity.AppUser;
import com.yourapp.entity.Category;
import com.yourapp.entity.Goods;
import org.springframework.stereotype.Component;

@Component
public class GoodsMapper {

    public Goods toEntity(GoodsDto dto, AppUser user, Category category) {
        Goods goods = new Goods();
        goods.setId(dto.getId());
        goods.setName(dto.getName());
        goods.setQuantity(dto.getQuantity());
        goods.setUnitOfMeasure(dto.getUnitOfMeasure());
        goods.setLocation(dto.getLocation());
        goods.setExpiryDate(dto.getExpiryDate());
        goods.setAcquisitionDate(dto.getAcquisitionDate());
        goods.setMinimumStockLevel(dto.getMinimumStockLevel());
        goods.setPrice(dto.getPrice());
        goods.setSupplier(dto.getSupplier());
        goods.setStatus(dto.getStatus());
        goods.setUser(user);
        goods.setCategory(category);
        return goods;
    }

    public GoodsDto toDto(Goods goods) {
        GoodsDto dto = new GoodsDto();
        dto.setId(goods.getId());
        dto.setName(goods.getName());
        dto.setQuantity(goods.getQuantity());
        dto.setUnitOfMeasure(goods.getUnitOfMeasure());
        dto.setLocation(goods.getLocation());
        dto.setExpiryDate(goods.getExpiryDate());
        dto.setAcquisitionDate(goods.getAcquisitionDate());
        dto.setMinimumStockLevel(goods.getMinimumStockLevel());
        dto.setPrice(goods.getPrice());
        dto.setSupplier(goods.getSupplier());
        dto.setStatus(goods.getStatus());
        dto.setUserId(goods.getUser().getId());
        dto.setCategoryId(goods.getCategory().getId());
        return dto;
    }
}


---

4. GoodsRepository.java

package com.yourapp.repository;

import com.yourapp.entity.Goods;
import org.springframework.data.jpa.repository.JpaRepository;

public interface GoodsRepository extends JpaRepository<Goods, Long> {
}


---

5. GoodsService.java

package com.yourapp.service;

import com.yourapp.dto.GoodsDto;
import com.yourapp.entity.AppUser;
import com.yourapp.entity.Category;
import com.yourapp.entity.Goods;
import com.yourapp.mapper.GoodsMapper;
import com.yourapp.repository.AppUserRepository;
import com.yourapp.repository.CategoryRepository;
import com.yourapp.repository.GoodsRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class GoodsService {

    private final GoodsRepository goodsRepository;
    private final AppUserRepository userRepository;
    private final CategoryRepository categoryRepository;
    private final GoodsMapper mapper;

    public GoodsDto create(GoodsDto dto) {
        AppUser user = userRepository.findById(dto.getUserId()).orElseThrow();
        Category category = categoryRepository.findById(dto.getCategoryId()).orElseThrow();
        Goods goods = mapper.toEntity(dto, user, category);
        return mapper.toDto(goodsRepository.save(goods));
    }

    public GoodsDto getById(Long id) {
        return goodsRepository.findById(id).map(mapper::toDto).orElseThrow();
    }

    public List<GoodsDto> getAll() {
        return goodsRepository.findAll().stream().map(mapper::toDto).collect(Collectors.toList());
    }

    public GoodsDto update(Long id, GoodsDto dto) {
        Goods existing = goodsRepository.findById(id).orElseThrow();
        AppUser user = userRepository.findById(dto.getUserId()).orElseThrow();
        Category category = categoryRepository.findById(dto.getCategoryId()).orElseThrow();
        Goods updated = mapper.toEntity(dto, user, category);
        updated.setId(id);
        return mapper.toDto(goodsRepository.save(updated));
    }

    public void delete(Long id) {
        goodsRepository.deleteById(id);
    }
}


---

6. GoodsController.java

package com.yourapp.controller;

import com.yourapp.dto.GoodsDto;
import com.yourapp.service.GoodsService;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/goods")
@RequiredArgsConstructor
public class GoodsController {

    private final GoodsService goodsService;

    @PostMapping
    public GoodsDto create(@RequestBody GoodsDto dto) {
        return goodsService.create(dto);
    }

    @GetMapping("/{id}")
    public GoodsDto getById(@PathVariable Long id) {
        return goodsService.getById(id);
    }

    @GetMapping
    public List<GoodsDto> getAll() {
        return goodsService.getAll();
    }

    @PutMapping("/{id}")
    public GoodsDto update(@PathVariable Long id, @RequestBody GoodsDto dto) {
        return goodsService.update(id, dto);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) {
        goodsService.delete(id);
    }
}


---

✅ Sample JSON for Goods API

{
  "name": "Olive Oil",
  "quantity": 50,
  "unitOfMeasure": "Liters",
  "location": "Warehouse 3A",
  "expiryDate": "2025-12-31",
  "acquisitionDate": "2024-11-15",
  "minimumStockLevel": 10,
  "price": 150.5,
  "supplier": "Nature Supplies Co.",
  "status": "Available",
  "userId": 1,
  "categoryId": 2
}


---

Would you like me to generate the Liquibase changelog for goods or mock insert data as well?
