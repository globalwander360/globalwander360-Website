Great! I’ll generate the complete login/signup backend source code that fits cleanly into your existing Inventory Management Spring Boot project (Day 1–10) — without using JwtService, and fully aligned with your current structure.


---

Authentication Backend Structure to Integrate

src/
└── main/
    └── java/
        └── com/
            └── yourapp/
                ├── controller/
                │   └── AuthController.java
                ├── dto/
                │   ├── LoginRequest.java
                │   ├── RegisterRequest.java
                │   └── AuthResponse.java
                ├── entity/
                │   └── AppUser.java
                ├── repository/
                │   └── AppUserRepository.java
                ├── security/
                │   ├── AppUserDetailsService.java
                │   └── SecurityConfig.java
                └── service/
                    └── AuthService.java


---

1. AppUser.java (Entity)

package com.yourapp.entity;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Getter @Setter
@NoArgsConstructor @AllArgsConstructor
@Table(name = "app_user")
public class AppUser {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String email;
    private String password;
    private String role;
}


---

2. DTOs

LoginRequest.java

package com.yourapp.dto;

import lombok.Data;

@Data
public class LoginRequest {
    private String email;
    private String password;
}

RegisterRequest.java

package com.yourapp.dto;

import lombok.Data;

@Data
public class RegisterRequest {
    private String email;
    private String password;
    private String role;
}

AuthResponse.java

package com.yourapp.dto;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class AuthResponse {
    private String token;
    private String role;
}


---

3. AppUserRepository.java

package com.yourapp.repository;

import com.yourapp.entity.AppUser;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface AppUserRepository extends JpaRepository<AppUser, Long> {
    Optional<AppUser> findByEmail(String email);
}


---

4. AuthService.java

package com.yourapp.service;

import com.yourapp.dto.LoginRequest;
import com.yourapp.dto.RegisterRequest;
import com.yourapp.dto.AuthResponse;
import com.yourapp.entity.AppUser;
import com.yourapp.repository.AppUserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class AuthService {

    private final AppUserRepository userRepository;
    private final PasswordEncoder passwordEncoder;

    public AuthResponse register(RegisterRequest request) {
        AppUser user = new AppUser();
        user.setEmail(request.getEmail());
        user.setPassword(passwordEncoder.encode(request.getPassword()));
        user.setRole(request.getRole());
        userRepository.save(user);
        return new AuthResponse("registered", user.getRole());
    }

    public AuthResponse login(LoginRequest request) {
        AppUser user = userRepository.findByEmail(request.getEmail())
                .orElseThrow(() -> new RuntimeException("User not found"));
        if (!passwordEncoder.matches(request.getPassword(), user.getPassword())) {
            throw new RuntimeException("Invalid credentials");
        }
        return new AuthResponse("loggedin", user.getRole());
    }
}


---

5. AuthController.java

package com.yourapp.controller;

import com.yourapp.dto.LoginRequest;
import com.yourapp.dto.RegisterRequest;
import com.yourapp.dto.AuthResponse;
import com.yourapp.service.AuthService;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
public class AuthController {

    private final AuthService authService;

    @PostMapping("/register")
    public AuthResponse register(@RequestBody RegisterRequest request) {
        return authService.register(request);
    }

    @PostMapping("/login")
    public AuthResponse login(@RequestBody LoginRequest request) {
        return authService.login(request);
    }
}


---

6. AppUserDetailsService.java

(Not strictly needed unless you're using full UserDetailsService for security config. Skip for now if using basic auth logic.)


---

7. SecurityConfig.java

package com.yourapp.security;

import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@RequiredArgsConstructor
public class SecurityConfig {

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        return http
                .csrf(csrf -> csrf.disable())
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers("/api/auth/**").permitAll()
                        .anyRequest().authenticated()
                )
                .sessionManagement(sess -> sess.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}


---

Would you like me to include the Liquibase changelog for app_user table, or should I help with connecting this with your existing modules (like categories/goods)?


Here’s the Liquibase changelog XML for the app_user table that works seamlessly with the authentication code we just integrated:


---

db/changelog/changes/001-create-app-user.xml

<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog 
                        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.4.xsd">

    <changeSet id="001-create-app-user" author="yourname">
        <createTable tableName="app_user">
            <column name="id" type="BIGINT" autoIncrement="true">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="email" type="VARCHAR(255)">
                <constraints nullable="false" unique="true"/>
            </column>
            <column name="password" type="VARCHAR(255)">
                <constraints nullable="false"/>
            </column>
            <column name="role" type="VARCHAR(50)">
                <constraints nullable="false"/>
            </column>
        </createTable>
    </changeSet>

</databaseChangeLog>


---

How to Add This

1. Place it in your src/main/resources/db/changelog/changes/ folder.


2. Add the file reference in your main changelog (e.g., master.xml):



<include file="db/changelog/changes/001-create-app-user.xml"/>


---

Let me know if you want me to generate initial test data for users via Liquibase insert statements — or connect the roles dynamically across your dashboard and login flow.

