Thanks! I’ll now update your backend Category code based on the new fields:


---

Updated Category.java (Entity)

package com.yourapp.entity;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "category")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Category {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;

    private String description;

    private String storageRequirements;

    private Boolean isPerishable;

    private Integer shelfLife;
}


---

Updated CategoryDto.java

package com.yourapp.dto;

import lombok.Data;

@Data
public class CategoryDto {
    private Long id;
    private String name;
    private String description;
    private String storageRequirements;
    private Boolean isPerishable;
    private Integer shelfLife;
}


---

Updated CategoryMapper.java

package com.yourapp.mapper;

import com.yourapp.dto.CategoryDto;
import com.yourapp.entity.Category;
import org.springframework.stereotype.Component;

@Component
public class CategoryMapper {

    public Category toEntity(CategoryDto dto) {
        Category category = new Category();
        category.setId(dto.getId());
        category.setName(dto.getName());
        category.setDescription(dto.getDescription());
        category.setStorageRequirements(dto.getStorageRequirements());
        category.setIsPerishable(dto.getIsPerishable());
        category.setShelfLife(dto.getShelfLife());
        return category;
    }

    public CategoryDto toDto(Category entity) {
        CategoryDto dto = new CategoryDto();
        dto.setId(entity.getId());
        dto.setName(entity.getName());
        dto.setDescription(entity.getDescription());
        dto.setStorageRequirements(entity.getStorageRequirements());
        dto.setIsPerishable(entity.getIsPerishable());
        dto.setShelfLife(entity.getShelfLife());
        return dto;
    }
}


---

CategoryRepository.java

package com.yourapp.repository;

import com.yourapp.entity.Category;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CategoryRepository extends JpaRepository<Category, Long> {
}


---

Updated CategoryService.java

package com.yourapp.service;

import com.yourapp.dto.CategoryDto;
import com.yourapp.entity.Category;
import com.yourapp.mapper.CategoryMapper;
import com.yourapp.repository.CategoryRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class CategoryService {

    private final CategoryRepository repository;
    private final CategoryMapper mapper;

    public CategoryDto create(CategoryDto dto) {
        Category category = mapper.toEntity(dto);
        return mapper.toDto(repository.save(category));
    }

    public CategoryDto update(Long id, CategoryDto dto) {
        Category category = repository.findById(id).orElseThrow();
        category.setName(dto.getName());
        category.setDescription(dto.getDescription());
        category.setStorageRequirements(dto.getStorageRequirements());
        category.setIsPerishable(dto.getIsPerishable());
        category.setShelfLife(dto.getShelfLife());
        return mapper.toDto(repository.save(category));
    }

    public CategoryDto getById(Long id) {
        return mapper.toDto(repository.findById(id).orElseThrow());
    }

    public List<CategoryDto> getAll() {
        return repository.findAll()
                .stream()
                .map(mapper::toDto)
                .collect(Collectors.toList());
    }

    public void delete(Long id) {
        repository.deleteById(id);
    }
}


---

Updated CategoryController.java

package com.yourapp.controller;

import com.yourapp.dto.CategoryDto;
import com.yourapp.service.CategoryService;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/categories")
@RequiredArgsConstructor
public class CategoryController {

    private final CategoryService service;

    @PostMapping
    public CategoryDto create(@RequestBody CategoryDto dto) {
        return service.create(dto);
    }

    @PutMapping("/{id}")
    public CategoryDto update(@PathVariable Long id, @RequestBody CategoryDto dto) {
        return service.update(id, dto);
    }

    @GetMapping("/{id}")
    public CategoryDto getById(@PathVariable Long id) {
        return service.getById(id);
    }

    @GetMapping
    public List<CategoryDto> getAll() {
        return service.getAll();
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) {
        service.delete(id);
    }
}


---

Would you like me to also provide mock data (10 JSON examples) for Category creation now?





Here are 10 mock JSON inputs for creating categories, based on your fields:


---

Mock Category JSON Data

{
  "id": 1,
  "name": "Fruits",
  "description": "Fresh and seasonal fruits",
  "storageRequirements": "Cool and dry place",
  "isPerishable": true,
  "shelfLife": 7
}

{
  "id": 2,
  "name": "Electronics",
  "description": "Electronic devices and accessories",
  "storageRequirements": "Room temperature, dust-free",
  "isPerishable": false,
  "shelfLife": 365
}

{
  "id": 3,
  "name": "Dairy",
  "description": "Milk and milk products",
  "storageRequirements": "Refrigerated",
  "isPerishable": true,
  "shelfLife": 10
}

{
  "id": 4,
  "name": "Beverages",
  "description": "Soft drinks, juices, and water",
  "storageRequirements": "Cool place",
  "isPerishable": true,
  "shelfLife": 180
}

{
  "id": 5,
  "name": "Stationery",
  "description": "Office and school supplies",
  "storageRequirements": "Dry shelf",
  "isPerishable": false,
  "shelfLife": 720
}

{
  "id": 6,
  "name": "Frozen Foods",
  "description": "Frozen vegetables and meats",
  "storageRequirements": "Frozen at -18°C",
  "isPerishable": true,
  "shelfLife": 90
}

{
  "id": 7,
  "name": "Pharmaceuticals",
  "description": "Medicines and health supplies",
  "storageRequirements": "Controlled temperature",
  "isPerishable": true,
  "shelfLife": 365
}

{
  "id": 8,
  "name": "Clothing",
  "description": "Men’s, women’s and children’s clothing",
  "storageRequirements": "Dry and clean racks",
  "isPerishable": false,
  "shelfLife": 1095
}

{
  "id": 9,
  "name": "Bakery",
  "description": "Breads, cakes, and pastries",
  "storageRequirements": "Room temperature in airtight containers",
  "isPerishable": true,
  "shelfLife": 5
}

{
  "id": 10,
  "name": "Cleaning Supplies",
  "description": "Detergents, soaps, and disinfectants",
  "storageRequirements": "Dry and well-ventilated area",
  "isPerishable": false,
  "shelfLife": 730
}


---

Let me know if you'd like these loaded into your database using Liquibase changelog too.

