Here's the complete updated backend code for Goods Registration, fully integrated with the latest Category entity as a foreign key. It includes the Entity, DTO, Mapper, Repository, Service, and Controller layers.


---

1. Goods.java (entity)

package com.yourapp.entity;

import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDate;

@Entity
@Table(name = "goods")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Goods {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;

    private String description;

    private Integer quantity;

    private LocalDate expiryDate;

    @ManyToOne
    @JoinColumn(name = "category_id")
    private Category category;
}


---

2. GoodsDto.java (dto)

package com.yourapp.dto;

import lombok.Data;

import java.time.LocalDate;

@Data
public class GoodsDto {
    private Long id;
    private String name;
    private String description;
    private Integer quantity;
    private LocalDate expiryDate;
    private Long categoryId;
}


---

3. GoodsMapper.java (mapper)

package com.yourapp.mapper;

import com.yourapp.dto.GoodsDto;
import com.yourapp.entity.Category;
import com.yourapp.entity.Goods;
import com.yourapp.repository.CategoryRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

@Component
@RequiredArgsConstructor
public class GoodsMapper {

    private final CategoryRepository categoryRepository;

    public Goods toEntity(GoodsDto dto) {
        Goods goods = new Goods();
        goods.setId(dto.getId());
        goods.setName(dto.getName());
        goods.setDescription(dto.getDescription());
        goods.setQuantity(dto.getQuantity());
        goods.setExpiryDate(dto.getExpiryDate());

        Category category = categoryRepository.findById(dto.getCategoryId())
                .orElseThrow(() -> new RuntimeException("Category not found"));
        goods.setCategory(category);

        return goods;
    }

    public GoodsDto toDto(Goods entity) {
        GoodsDto dto = new GoodsDto();
        dto.setId(entity.getId());
        dto.setName(entity.getName());
        dto.setDescription(entity.getDescription());
        dto.setQuantity(entity.getQuantity());
        dto.setExpiryDate(entity.getExpiryDate());
        dto.setCategoryId(entity.getCategory().getId());
        return dto;
    }
}


---

4. GoodsRepository.java (repository)

package com.yourapp.repository;

import com.yourapp.entity.Goods;
import org.springframework.data.jpa.repository.JpaRepository;

public interface GoodsRepository extends JpaRepository<Goods, Long> {
}


---

5. GoodsService.java (service)

package com.yourapp.service;

import com.yourapp.dto.GoodsDto;
import com.yourapp.entity.Goods;
import com.yourapp.mapper.GoodsMapper;
import com.yourapp.repository.GoodsRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class GoodsService {

    private final GoodsRepository goodsRepository;
    private final GoodsMapper goodsMapper;

    public GoodsDto create(GoodsDto dto) {
        Goods saved = goodsRepository.save(goodsMapper.toEntity(dto));
        return goodsMapper.toDto(saved);
    }

    public GoodsDto update(Long id, GoodsDto dto) {
        Goods goods = goodsRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Goods not found"));
        dto.setId(id);
        return goodsMapper.toDto(goodsRepository.save(goodsMapper.toEntity(dto)));
    }

    public GoodsDto getById(Long id) {
        Goods goods = goodsRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Goods not found"));
        return goodsMapper.toDto(goods);
    }

    public List<GoodsDto> getAll() {
        return goodsRepository.findAll().stream()
                .map(goodsMapper::toDto)
                .collect(Collectors.toList());
    }

    public void delete(Long id) {
        goodsRepository.deleteById(id);
    }
}


---

6. GoodsController.java (controller)

package com.yourapp.controller;

import com.yourapp.dto.GoodsDto;
import com.yourapp.service.GoodsService;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/goods")
@RequiredArgsConstructor
public class GoodsController {

    private final GoodsService service;

    @PostMapping
    public GoodsDto create(@RequestBody GoodsDto dto) {
        return service.create(dto);
    }

    @PutMapping("/{id}")
    public GoodsDto update(@PathVariable Long id, @RequestBody GoodsDto dto) {
        return service.update(id, dto);
    }

    @GetMapping("/{id}")
    public GoodsDto getById(@PathVariable Long id) {
        return service.getById(id);
    }

    @GetMapping
    public List<GoodsDto> getAll() {
        return service.getAll();
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) {
        service.delete(id);
    }Here are 10 sample JSON request bodies you can use to register goods, assuming the categoryId values already exist in your database.

Example JSONs for Goods Registration

{
  "name": "Laptop",
  "description": "High performance laptop",
  "quantity": 15,
  "expiryDate": "2026-12-31",
  "categoryId": 1
}

{
  "name": "Apples",
  "description": "Fresh red apples",
  "quantity": 100,
  "expiryDate": "2025-05-01",
  "categoryId": 2
}

{
  "name": "Detergent",
  "description": "Liquid detergent for laundry",
  "quantity": 30,
  "expiryDate": "2027-01-15",
  "categoryId": 3
}

{
  "name": "Tomatoes",
  "description": "Organic tomatoes",
  "quantity": 80,
  "expiryDate": "2025-04-25",
  "categoryId": 2
}

{
  "name": "Office Chair",
  "description": "Ergonomic swivel chair",
  "quantity": 10,
  "expiryDate": "2030-01-01",
  "categoryId": 4
}

{
  "name": "Bananas",
  "description": "Yellow ripe bananas",
  "quantity": 120,
  "expiryDate": "2025-04-20",
  "categoryId": 2
}

{
  "name": "Mobile Phone",
  "description": "Latest model smartphone",
  "quantity": 25,
  "expiryDate": "2028-11-10",
  "categoryId": 1
}

{
  "name": "Shampoo",
  "description": "Herbal anti-dandruff shampoo",
  "quantity": 40,
  "expiryDate": "2026-08-05",
  "categoryId": 3
}

{
  "name": "Carrots",
  "description": "Farm-fresh carrots",
  "quantity": 90,
  "expiryDate": "2025-04-22",
  "categoryId": 2
}

{
  "name": "Headphones",
  "description": "Wireless noise-canceling headphones",
  "quantity": 18,
  "expiryDate": "2029-12-01",
  "categoryId": 1
}

> Replace the categoryId with actual category IDs that exist in your database (like 1 for Electronics, 2 for Vegetables, etc.)



Need JSON for category creation too or sample data with invalid entries for testing validations?


}


---

Let me know if you also want:

Liquibase changelog for the goods table with foreign key to category

Frontend form to test this endpoint

Mock JSON for goods creation requests


Just say the word!



