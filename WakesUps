Hereâ€™s the complete working backend implementation of the GoodsReview feature with approval/rejection logic and validation, including:

1. GoodsStatus Enum

package org.policy.enums;

public enum GoodsStatus {
    PENDING,
    APPROVED,
    REJECTED
}


---

2. GoodsReview Entity

package org.policy.entity;

import jakarta.persistence.*;
import lombok.*;
import org.policy.enums.GoodsStatus;

@Entity
@Table(name = "goods_review")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class GoodsReview {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Enumerated(EnumType.STRING)
    private GoodsStatus status;

    private String comment;

    @OneToOne
    @JoinColumn(name = "goods_id", nullable = false)
    private Goods goods;
}


---

3. GoodsReviewDto

package org.policy.dto;

import lombok.*;
import org.policy.enums.GoodsStatus;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class GoodsReviewDto {

    private Long id;

    private GoodsStatus status;

    private String comment;

    private Long goodsId;
}


---

4. GoodsReviewRepository

package org.policy.repository;

import org.policy.entity.GoodsReview;
import org.springframework.data.jpa.repository.JpaRepository;

public interface GoodsReviewRepository extends JpaRepository<GoodsReview, Long> {
}


---

5. GoodsReviewService

package org.policy.service;

import org.policy.dto.GoodsReviewDto;

import java.util.List;

public interface GoodsReviewService {
    GoodsReviewDto reviewGoods(GoodsReviewDto dto);
    List<GoodsReviewDto> getAllReviews();
}


---

6. GoodsReviewServiceImpl

package org.policy.service.impl;

import lombok.RequiredArgsConstructor;
import org.policy.dto.GoodsReviewDto;
import org.policy.entity.Goods;
import org.policy.entity.GoodsReview;
import org.policy.enums.GoodsStatus;
import org.policy.repository.GoodsRepository;
import org.policy.repository.GoodsReviewRepository;
import org.policy.service.GoodsReviewService;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class GoodsReviewServiceImpl implements GoodsReviewService {

    private final GoodsReviewRepository reviewRepo;
    private final GoodsRepository goodsRepo;

    @Override
    public GoodsReviewDto reviewGoods(GoodsReviewDto dto) {
        Goods goods = goodsRepo.findById(dto.getGoodsId())
                .orElseThrow(() -> new NoSuchElementException("Goods not found with id: " + dto.getGoodsId()));

        if (dto.getStatus() == GoodsStatus.REJECTED && (dto.getComment() == null || dto.getComment().isEmpty())) {
            throw new IllegalArgumentException("Comment is required when rejecting goods.");
        }

        goods.setStatus(dto.getStatus().name());

        GoodsReview review = new GoodsReview();
        review.setStatus(dto.getStatus());
        review.setComment(dto.getComment());
        review.setGoods(goods);

        goodsRepo.save(goods);
        GoodsReview saved = reviewRepo.save(review);

        return new GoodsReviewDto(saved.getId(), saved.getStatus(), saved.getComment(), saved.getGoods().getId());
    }

    @Override
    public List<GoodsReviewDto> getAllReviews() {
        return reviewRepo.findAll().stream().map(review ->
            new GoodsReviewDto(
                review.getId(),
                review.getStatus(),
                review.getComment(),
                review.getGoods().getId()
            )
        ).collect(Collectors.toList());
    }
}


---

7. GoodsReviewController

package org.policy.controller;

import lombok.RequiredArgsConstructor;
import org.policy.dto.GoodsReviewDto;
import org.policy.service.GoodsReviewService;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/goods-review")
@RequiredArgsConstructor
public class GoodsReviewController {

    private final GoodsReviewService service;

    @PostMapping
    public GoodsReviewDto reviewGoods(@RequestBody GoodsReviewDto dto) {
        return service.reviewGoods(dto);
    }

    @GetMapping
    public List<GoodsReviewDto> getAllReviews() {
        return service.getAllReviews();
    }
}


---

8. Sample JSON Input for Testing

Approve Goods

{
  "goodsId": 1,
  "status": "APPROVED",
  "comment": "Looks good"
}

Reject Goods

{
  "goodsId": 2,
  "status": "REJECTED",
  "comment": "Packaging damaged"
}

Let me know if you want the Liquibase XML to create the goods_review table as well.

Here is the Liquibase XML for the goods_review table, based on the GoodsReview entity:

<?xml version="1.0" encoding="UTF-8"?>

<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

    <!-- ChangeSet for creating 'goods_review' table -->
    <changeSet author="yourname" id="1" dbms="postgresql, mysql, h2, mssql">
        <createTable tableName="goods_review">
            <column name="id" type="bigint">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="status" type="varchar(255)">
                <constraints nullable="false"/>
            </column>
            <column name="comment" type="text"/>
            <column name="goods_id" type="bigint">
                <constraints nullable="false"/>
            </column>

            <!-- Foreign Key Constraint -->
            <addForeignKeyConstraint 
                baseTableName="goods_review"
                baseColumnNames="goods_id"
                referencedTableName="goods"
                referencedColumnNames="id"
                constraintName="fk_goods_review_goods"
                onDelete="CASCADE"/>
        </createTable>
    </changeSet>

    <!-- ChangeSet for adding sample data (Optional) -->
    <changeSet author="yourname" id="2" dbms="postgresql, mysql, h2, mssql">
        <insert tableName="goods_review">
            <column name="status" value="PENDING"/>
            <column name="comment" value=""/>
            <column name="goods_id" value="1"/>
        </insert>
        <insert tableName="goods_review">
            <column name="status" value="APPROVED"/>
            <column name="comment" value="Approved after checking"/>
            <column name="goods_id" value="2"/>
        </insert>
    </changeSet>

</databaseChangeLog>

Explanation:

createTable: This creates the goods_review table with columns:

id: Primary key (auto-generated).

status: The status of the review (APPROVED, REJECTED, or PENDING).

comment: Optional comment for rejection or approval.

goods_id: Foreign key referencing the goods table.


addForeignKeyConstraint: This creates the foreign key relationship between goods_review.goods_id and goods.id with a CASCADE delete policy (deletes the review when the associated goods are deleted).

Sample Data: The insert statements are optional. They add sample data for testing purposes.


You can use this XML with Liquibase to create the goods_review table and optionally insert sample data. Let me know if you need any more adjustments!
