Here's the complete and updated backend source code for Day 7: Reporting (Spring Boot). It includes:

Report DTOs

Repository queries

Service logic

Controller endpoints

Fixes to resolve previous errors (such as DTO instantiation issues and managed type problems)



---

1. ReportDto.java (under org.policy.dto)

package org.policy.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.io.Serializable;

public class ReportDto {

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    public static class CategoryGoodsCount implements Serializable {
        private String categoryName;
        private Long totalGoods;
    }

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    public static class StatusSummary implements Serializable {
        private Long approved;
        private Long rejected;
        private Long pending;
    }

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    public static class RejectionReason implements Serializable {
        private String reason;
        private Long count;
    }
}


---

2. ReportRepository.java (under org.policy.repository)

package org.policy.repository;

import org.policy.dto.ReportDto;
import org.policy.entity.Goods;
import org.policy.entity.GoodsReview;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;

import java.util.List;

public interface ReportRepository extends CrudRepository<Goods, Long> {

    @Query("SELECT new org.policy.dto.ReportDto.CategoryGoodsCount(c.name, COUNT(g)) " +
           "FROM Goods g JOIN g.category c GROUP BY c.name")
    List<ReportDto.CategoryGoodsCount> fetchGoodsByCategory();

    @Query("SELECT new org.policy.dto.ReportDto.StatusSummary(" +
           "SUM(CASE WHEN g.status = 'APPROVED' THEN 1 ELSE 0 END), " +
           "SUM(CASE WHEN g.status = 'REJECTED' THEN 1 ELSE 0 END), " +
           "SUM(CASE WHEN g.status = 'PENDING' THEN 1 ELSE 0 END)) " +
           "FROM Goods g")
    ReportDto.StatusSummary fetchStatusSummary();

    @Query("SELECT new org.policy.dto.ReportDto.RejectionReason(r.comment, COUNT(r)) " +
           "FROM GoodsReview r WHERE r.status = 'REJECTED' GROUP BY r.comment")
    List<ReportDto.RejectionReason> fetchRejectionReasons();
}


---

3. ReportService.java (under org.policy.service)

package org.policy.service;

import lombok.RequiredArgsConstructor;
import org.policy.dto.ReportDto;
import org.policy.repository.ReportRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class ReportService {

    private final ReportRepository repository;

    public List<ReportDto.CategoryGoodsCount> getGoodsCountByCategory() {
        return repository.fetchGoodsByCategory();
    }

    public ReportDto.StatusSummary getStatusSummary() {
        return repository.fetchStatusSummary();
    }

    public List<ReportDto.RejectionReason> getRejectionSummary() {
        return repository.fetchRejectionReasons();
    }
}


---

4. ReportController.java (under org.policy.controller)

package org.policy.controller;

import lombok.RequiredArgsConstructor;
import org.policy.dto.ReportDto;
import org.policy.service.ReportService;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/reports")
@RequiredArgsConstructor
public class ReportController {

    private final ReportService reportService;

    @GetMapping("/goods-by-category")
    public List<ReportDto.CategoryGoodsCount> getGoodsCountByCategory() {
        return reportService.getGoodsCountByCategory();
    }

    @GetMapping("/status-summary")
    public ReportDto.StatusSummary getStatusSummary() {
        return reportService.getStatusSummary();
    }

    @GetMapping("/rejection-summary")
    public List<ReportDto.RejectionReason> getRejectionSummary() {
        return reportService.getRejectionSummary();
    }
}


---

5. Required Entity Bindings (for repository support)

Make sure your Goods.java and GoodsReview.java entities are properly annotated and available in the same JPA context.

If GoodsReview is in a different repository, you may need to move the rejection query to its own repository or adjust accordingly.


---

Would you also like me to include test JSON input/output samples for these report APIs or move to Day 8 (Excel download)?

