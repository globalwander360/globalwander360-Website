Perfect! Here's the updated and final version of your authentication backend, tailored to integrate cleanly with your existing Inventory Management Spring Boot project (Day 1–10). This includes:

Full working login & signup without JWT

Secure password handling

GET mapping to fetch the current user by email

No use of JwtService

Integrated as per your existing structure



---

✅ Folder Structure Summary (within existing project)

src/main/java/com/yourapp/
├── controller/
│   └── AuthController.java
├── dto/
│   ├── AuthResponse.java
│   ├── LoginRequest.java
│   └── RegisterRequest.java
├── entity/
│   └── AppUser.java
├── repository/
│   └── AppUserRepository.java
├── security/
│   └── SecurityConfig.java
└── service/
    └── AuthService.java


---

✅ Full Source Code

1. AppUser.java

package com.yourapp.entity;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "app_user")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class AppUser {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String email;
    private String password;
    private String role;
}


---

2. DTOs

LoginRequest.java

package com.yourapp.dto;

import lombok.Data;

@Data
public class LoginRequest {
    private String email;
    private String password;
}

RegisterRequest.java

package com.yourapp.dto;

import lombok.Data;

@Data
public class RegisterRequest {
    private String email;
    private String password;
    private String role;
}

AuthResponse.java

package com.yourapp.dto;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class AuthResponse {
    private String message;
    private String role;
}


---

3. AppUserRepository.java

package com.yourapp.repository;

import com.yourapp.entity.AppUser;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface AppUserRepository extends JpaRepository<AppUser, Long> {
    Optional<AppUser> findByEmail(String email);
}


---

4. AuthService.java

package com.yourapp.service;

import com.yourapp.dto.AuthResponse;
import com.yourapp.dto.LoginRequest;
import com.yourapp.dto.RegisterRequest;
import com.yourapp.entity.AppUser;
import com.yourapp.repository.AppUserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class AuthService {

    private final AppUserRepository userRepository;
    private final PasswordEncoder passwordEncoder;

    public AuthResponse register(RegisterRequest request) {
        if (userRepository.findByEmail(request.getEmail()).isPresent()) {
            throw new RuntimeException("Email already in use");
        }

        AppUser user = new AppUser();
        user.setEmail(request.getEmail());
        user.setPassword(passwordEncoder.encode(request.getPassword()));
        user.setRole(request.getRole());

        userRepository.save(user);

        return new AuthResponse("User registered successfully", user.getRole());
    }

    public AuthResponse login(LoginRequest request) {
        AppUser user = userRepository.findByEmail(request.getEmail())
                .orElseThrow(() -> new RuntimeException("User not found"));

        if (!passwordEncoder.matches(request.getPassword(), user.getPassword())) {
            throw new RuntimeException("Invalid credentials");
        }

        return new AuthResponse("Login successful", user.getRole());
    }

    public AppUser getUserByEmail(String email) {
        return userRepository.findByEmail(email)
                .orElseThrow(() -> new RuntimeException("User not found"));
    }
}


---

5. AuthController.java

package com.yourapp.controller;

import com.yourapp.dto.AuthResponse;
import com.yourapp.dto.LoginRequest;
import com.yourapp.dto.RegisterRequest;
import com.yourapp.entity.AppUser;
import com.yourapp.service.AuthService;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
@CrossOrigin
public class AuthController {

    private final AuthService authService;

    @PostMapping("/register")
    public AuthResponse register(@RequestBody RegisterRequest request) {
        return authService.register(request);
    }

    @PostMapping("/login")
    public AuthResponse login(@RequestBody LoginRequest request) {
        return authService.login(request);
    }

    @GetMapping("/me")
    public AppUser getUserByEmail(@RequestParam String email) {
        return authService.getUserByEmail(email);
    }
}


---

6. SecurityConfig.java

package com.yourapp.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        return http
                .csrf(csrf -> csrf.disable())
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers("/api/auth/**").permitAll()
                        .anyRequest().authenticated()
                )
                .sessionManagement(sess -> sess.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}


---

7. Optional: Liquibase app_user Table (if not added)

<changeSet id="1" author="you">
    <createTable tableName="app_user">
        <column name="id" type="BIGINT" autoIncrement="true">
            <constraints primaryKey="true"/>
        </column>
        <column name="email" type="VARCHAR(255)">
            <constraints nullable="false" unique="true"/>
        </column>
        <column name="password" type="VARCHAR(255)">
            <constraints nullable="false"/>
        </column>
        <column name="role" type="VARCHAR(50)">
            <constraints nullable="false"/>
        </column>
    </createTable>
</changeSet>


---

Let me know if you'd like me to generate:

Angular code to connect this login/register

Error handling/validation improvements

Integration with other modules (like user dashboards, warehouse roles, etc.)


Shall we proceed to frontend integration now?

[
  {
    "id": 1,
    "email": "harish@example.com",
    "password": "pass123",
    "role": "ADMIN"
  },
  {
    "id": 2,
    "email": "dhruv@example.com",
    "password": "pass123",
    "role": "USER"
  },
  {
    "id": 3,
    "email": "neha@example.com",
    "password": "pass123",
    "role": "USER"
  },
  {
    "id": 4,
    "email": "amit@example.com",
    "password": "pass123",
    "role": "LOGISTICS"
  },
  {
    "id": 5,
    "email": "anglo@example.com",
    "password": "pass123",
    "role": "USER"
  },
  {
    "id": 6,
    "email": "kishan@example.com",
    "password": "pass123",
    "role": "ADMIN"
  },
  {
    "id": 7,
    "email": "nishad@example.com",
    "password": "pass123",
    "role": "LOGISTICS"
  },
  {
    "id": 8,
    "email": "saurabh@example.com",
    "password": "pass123",
    "role": "USER"
  },
  {
    "id": 9,
    "email": "ashwani@example.com",
    "password": "pass123",
    "role": "USER"
  },
  {
    "id": 10,
    "email": "extra@example.com",
    "password": "pass123",
    "role": "USER"
  }
]
