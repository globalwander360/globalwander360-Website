Great! Here's the complete backend structure and source code for Day 9: Warehouse Management, along with updates to previously created files where necessary.


---

Day 9 – Backend Folder Structure

src/main/java/org/policy/
│
├── controller/
│   └── WarehouseController.java
│
├── dto/
│   └── WarehouseDto.java
│
├── entity/
│   └── Warehouse.java       (Already created)
│
├── mapper/
│   └── WarehouseMapper.java
│
├── repository/
│   └── WarehouseRepository.java
│
├── service/
│   ├── WarehouseService.java
│   └── impl/
│       └── WarehouseServiceImpl.java


---

1. WarehouseDto.java

package org.policy.dto;

import lombok.*;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class WarehouseDto {
    private Long id;
    private String name;
    private String location;
}


---

2. WarehouseRepository.java

package org.policy.repository;

import org.policy.entity.Warehouse;
import org.springframework.data.jpa.repository.JpaRepository;

public interface WarehouseRepository extends JpaRepository<Warehouse, Long> {
    boolean existsByName(String name);
}


---

3. WarehouseMapper.java

package org.policy.mapper;

import org.policy.dto.WarehouseDto;
import org.policy.entity.Warehouse;
import org.springframework.stereotype.Component;

@Component
public class WarehouseMapper {

    public Warehouse toEntity(WarehouseDto dto) {
        return Warehouse.builder()
                .id(dto.getId())
                .name(dto.getName())
                .location(dto.getLocation())
                .build();
    }

    public WarehouseDto toDto(Warehouse entity) {
        return WarehouseDto.builder()
                .id(entity.getId())
                .name(entity.getName())
                .location(entity.getLocation())
                .build();
    }
}


---

4. WarehouseService.java

package org.policy.service;

import org.policy.dto.WarehouseDto;
import java.util.List;

public interface WarehouseService {
    WarehouseDto create(WarehouseDto dto);
    WarehouseDto update(Long id, WarehouseDto dto);
    void delete(Long id);
    WarehouseDto getById(Long id);
    List<WarehouseDto> getAll();
}


---

5. WarehouseServiceImpl.java

package org.policy.service.impl;

import lombok.RequiredArgsConstructor;
import org.policy.dto.WarehouseDto;
import org.policy.entity.Warehouse;
import org.policy.exception.ResourceNotFoundException;
import org.policy.mapper.WarehouseMapper;
import org.policy.repository.WarehouseRepository;
import org.policy.service.WarehouseService;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class WarehouseServiceImpl implements WarehouseService {

    private final WarehouseRepository warehouseRepository;
    private final WarehouseMapper warehouseMapper;

    @Override
    public WarehouseDto create(WarehouseDto dto) {
        if (warehouseRepository.existsByName(dto.getName())) {
            throw new IllegalArgumentException("Warehouse already exists with name: " + dto.getName());
        }
        Warehouse warehouse = warehouseMapper.toEntity(dto);
        return warehouseMapper.toDto(warehouseRepository.save(warehouse));
    }

    @Override
    public WarehouseDto update(Long id, WarehouseDto dto) {
        Warehouse warehouse = warehouseRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Warehouse not found with id " + id));
        warehouse.setName(dto.getName());
        warehouse.setLocation(dto.getLocation());
        return warehouseMapper.toDto(warehouseRepository.save(warehouse));
    }

    @Override
    public void delete(Long id) {
        warehouseRepository.deleteById(id);
    }

    @Override
    public WarehouseDto getById(Long id) {
        return warehouseMapper.toDto(warehouseRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Warehouse not found with id " + id)));
    }

    @Override
    public List<WarehouseDto> getAll() {
        return warehouseRepository.findAll().stream()
                .map(warehouseMapper::toDto)
                .collect(Collectors.toList());
    }
}


---

6. WarehouseController.java

package org.policy.controller;

import lombok.RequiredArgsConstructor;
import org.policy.dto.WarehouseDto;
import org.policy.service.WarehouseService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/warehouses")
@RequiredArgsConstructor
public class WarehouseController {

    private final WarehouseService warehouseService;

    @PostMapping
    public ResponseEntity<WarehouseDto> create(@RequestBody WarehouseDto dto) {
        return ResponseEntity.ok(warehouseService.create(dto));
    }

    @PutMapping("/{id}")
    public ResponseEntity<WarehouseDto> update(@PathVariable Long id, @RequestBody WarehouseDto dto) {
        return ResponseEntity.ok(warehouseService.update(id, dto));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable Long id) {
        warehouseService.delete(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/{id}")
    public ResponseEntity<WarehouseDto> getById(@PathVariable Long id) {
        return ResponseEntity.ok(warehouseService.getById(id));
    }

    @GetMapping
    public ResponseEntity<List<WarehouseDto>> getAll() {
        return ResponseEntity.ok(warehouseService.getAll());
    }
}


---

Let me know when you're ready to move to Day 10: Advanced Filtering and Pagination, or if you'd like unit tests, postman collection, or Swagger config next!
