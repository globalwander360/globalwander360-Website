Since your DTOs are fine, we’ll focus only on the updated files that need fixing or verification based on your Day 3 scope. Here’s a list of updated files you need to review:

Updated Files to Verify (Day 3)

1. CategoryMapper.java

package com.example.inventory.mapper;

import com.example.inventory.dto.CategoryDTO;
import com.example.inventory.entity.Category;
import org.springframework.stereotype.Component;

@Component
public class CategoryMapper {

    public Category toEntity(CategoryDTO dto) {
        if (dto == null) return null;

        Category entity = new Category();
        entity.setId(dto.getId());
        entity.setName(dto.getName());
        entity.setDescription(dto.getDescription());
        entity.setStorageRequirements(dto.getStorageRequirements());
        entity.setIsPerishable(dto.getIsPerishable());
        entity.setShelfLife(dto.getShelfLife());
        return entity;
    }

    public CategoryDTO toDto(Category entity) {
        if (entity == null) return null;

        CategoryDTO dto = new CategoryDTO();
        dto.setId(entity.getId());
        dto.setName(entity.getName());
        dto.setDescription(entity.getDescription());
        dto.setStorageRequirements(entity.getStorageRequirements());
        dto.setIsPerishable(entity.getIsPerishable());
        dto.setShelfLife(entity.getShelfLife());
        return dto;
    }
}


---

2. GoodsMapper.java

Make sure you have correct getters and null checks:

package com.example.inventory.mapper;

import com.example.inventory.dto.GoodsDTO;
import com.example.inventory.entity.Category;
import com.example.inventory.entity.Goods;
import com.example.inventory.repository.CategoryRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class GoodsMapper {

    @Autowired
    private CategoryRepository categoryRepository;

    public Goods toEntity(GoodsDTO dto) {
        if (dto == null) return null;

        Goods goods = new Goods();
        goods.setId(dto.getId());
        goods.setName(dto.getName());
        goods.setQuantity(dto.getQuantity());
        goods.setUnitOfMeasure(dto.getUnitOfMeasure());
        goods.setLocation(dto.getLocation());
        goods.setExpiryDate(dto.getExpiryDate());
        goods.setAcquisitionDate(dto.getAcquisitionDate());
        goods.setMinimumStockLevel(dto.getMinimumStockLevel());
        goods.setPrice(dto.getPrice());
        goods.setSupplier(dto.getSupplier());
        goods.setStatus(dto.getStatus());

        if (dto.getCategoryId() != null) {
            Category category = categoryRepository.findById(dto.getCategoryId()).orElse(null);
            goods.setCategory(category);
        }

        return goods;
    }

    public GoodsDTO toDto(Goods goods) {
        if (goods == null) return null;

        GoodsDTO dto = new GoodsDTO();
        dto.setId(goods.getId());
        dto.setName(goods.getName());
        dto.setQuantity(goods.getQuantity());
        dto.setUnitOfMeasure(goods.getUnitOfMeasure());
        dto.setLocation(goods.getLocation());
        dto.setExpiryDate(goods.getExpiryDate());
        dto.setAcquisitionDate(goods.getAcquisitionDate());
        dto.setMinimumStockLevel(goods.getMinimumStockLevel());
        dto.setPrice(goods.getPrice());
        dto.setSupplier(goods.getSupplier());
        dto.setStatus(goods.getStatus());

        if (goods.getCategory() != null) {
            dto.setCategoryId(goods.getCategory().getId());
        }

        return dto;
    }
}


---

3. GoodsService.java

Make sure toEntity() and findById() are added:

public Goods toEntity(GoodsDTO dto) {
    return goodsMapper.toEntity(dto);
}

public GoodsDTO findById(Long id) {
    return goodsRepository.findById(id)
            .map(goodsMapper::toDto)
            .orElseThrow(() -> new EntityNotFoundException("Goods not found with id: " + id));
}


---

4. GoodsServiceTest.java

Correct mock usage and assertions:

@ExtendWith(MockitoExtension.class)
class GoodsServiceTest {

    @Mock
    private GoodsRepository goodsRepository;

    @Mock
    private GoodsMapper goodsMapper;

    @InjectMocks
    private GoodsService goodsService;

    @Test
    void testFindById() {
        Goods goods = new Goods();
        goods.setId(1L);

        GoodsDTO dto = new GoodsDTO();
        dto.setId(1L);

        when(goodsRepository.findById(1L)).thenReturn(Optional.of(goods));
        when(goodsMapper.toDto(goods)).thenReturn(dto);

        GoodsDTO result = goodsService.findById(1L);

        assertEquals(dto.getId(), result.getId());
        verify(goodsRepository).findById(1L);
        verify(goodsMapper).toDto(goods);
    }
}
