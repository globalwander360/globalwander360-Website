Great! Here's the complete backend structure and full source code for Day 8: Generate Excel Reports (Admin) of your Inventory Management Module project.


---

Objective:

Allow Admin to download Excel reports:

Sheet 1: Inventory Summary

Sheet 2: Rejected Goods with Comments



---

1. Add Maven Dependency for Excel (Apache POI)

pom.xml

<dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>poi-ooxml</artifactId>
    <version>5.2.3</version>
</dependency>


---

2. Create ReportService

ReportService.java

package org.policy.service;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.policy.entity.Goods;
import org.policy.entity.Inventory;
import org.policy.repository.GoodsRepository;
import org.policy.repository.InventoryRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.List;

@Service
public class ReportService {

    @Autowired
    private InventoryRepository inventoryRepository;

    @Autowired
    private GoodsRepository goodsRepository;

    public ByteArrayInputStream generateExcelReport() throws IOException {
        try (Workbook workbook = new XSSFWorkbook()) {

            // Sheet 1: Inventory Summary
            Sheet inventorySheet = workbook.createSheet("Inventory Summary");
            Row header = inventorySheet.createRow(0);
            header.createCell(0).setCellValue("Goods Name");
            header.createCell(1).setCellValue("Quantity");
            header.createCell(2).setCellValue("Warehouse");
            header.createCell(3).setCellValue("Date Added");

            List<Inventory> inventories = inventoryRepository.findAll();
            int rowIdx = 1;
            for (Inventory inv : inventories) {
                Row row = inventorySheet.createRow(rowIdx++);
                row.createCell(0).setCellValue(inv.getGoods().getName());
                row.createCell(1).setCellValue(inv.getQuantity());
                row.createCell(2).setCellValue(inv.getWarehouse() != null ? inv.getWarehouse().getName() : "N/A");
                row.createCell(3).setCellValue(inv.getDateAdded().toString());
            }

            // Sheet 2: Rejected Goods
            Sheet rejectedSheet = workbook.createSheet("Rejected Goods");
            Row header2 = rejectedSheet.createRow(0);
            header2.createCell(0).setCellValue("Goods Name");
            header2.createCell(1).setCellValue("Supplier");
            header2.createCell(2).setCellValue("Rejection Comment");

            List<Goods> rejectedGoods = goodsRepository.findByStatus("REJECTED");
            int rowIdx2 = 1;
            for (Goods goods : rejectedGoods) {
                Row row = rejectedSheet.createRow(rowIdx2++);
                row.createCell(0).setCellValue(goods.getName());
                row.createCell(1).setCellValue(goods.getSupplier());
                row.createCell(2).setCellValue(goods.getGoodsReview() != null ? goods.getGoodsReview().getComment() : "No comment");
            }

            ByteArrayOutputStream out = new ByteArrayOutputStream();
            workbook.write(out);
            return new ByteArrayInputStream(out.toByteArray());
        }
    }
}


---

3. Create ReportController

ReportController.java

package org.policy.controller;

import org.policy.service.ReportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.io.ByteArrayInputStream;
import java.io.IOException;

@RestController
@RequestMapping("/api/report")
public class ReportController {

    @Autowired
    private ReportService reportService;

    @GetMapping("/excel")
    public ResponseEntity<InputStreamResource> downloadExcelReport() throws IOException {
        ByteArrayInputStream in = reportService.generateExcelReport();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Disposition", "attachment; filename=report.xlsx");

        return ResponseEntity
                .ok()
                .headers(headers)
                .contentType(MediaType.parseMediaType("application/vnd.ms-excel"))
                .body(new InputStreamResource(in));
    }
}


---

4. Add Custom Query to GoodsRepository

GoodsRepository.java

package org.policy.repository;

import org.policy.entity.Goods;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;

public interface GoodsRepository extends JpaRepository<Goods, Long> {
    List<Goods> findByStatus(String status);
}


---

5. Endpoint to Test

GET /api/report/excel

This will download the Excel file with two sheets: Inventory Summary and Rejected Goods.


---

Would you like me to generate a test case for this or move to Day 9 backend setup next?

Here’s the backend folder and file structure for Day 8 of your Inventory Management Module project, focused on Excel Report Generation.


---

Day 8 – Backend Folder Structure

src
└── main
    ├── java
    │   └── org
    │       └── policy
    │           ├── controller
    │           │   └── ReportController.java
    │           ├── entity
    │           │   ├── Goods.java
    │           │   ├── GoodsReview.java
    │           │   ├── Inventory.java
    │           │   └── Warehouse.java
    │           ├── repository
    │           │   ├── GoodsRepository.java  ← (Updated)
    │           │   ├── InventoryRepository.java
    │           │   └── WarehouseRepository.java
    │           └── service
    │               └── ReportService.java
    └── resources
        ├── application.properties
        └── db
            └── changelog
                └── db.changelog-master.xml


---

New Files in Day 8:

controller/ReportController.java

service/ReportService.java



---

Updated Files in Day 8:

repository/GoodsRepository.java → Added findByStatus(String status) method



---

Let me know if you want to move to Day 9 or need unit tests, authentication role checks for report access, or Angular integration for the Excel download!


Here’s the complete backend source code for Day 8 (Excel Report Generation) of your Inventory Management Module project. It includes:

New files:

ReportService.java

ReportController.java


Updated file:

GoodsRepository.java (added a method for filtering by status)




---

1. ReportService.java

package org.policy.service;

import lombok.RequiredArgsConstructor;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.policy.entity.Goods;
import org.policy.entity.GoodsReview;
import org.policy.entity.Inventory;
import org.policy.repository.GoodsRepository;
import org.policy.repository.InventoryRepository;
import org.springframework.stereotype.Service;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.List;

@Service
@RequiredArgsConstructor
public class ReportService {

    private final GoodsRepository goodsRepository;
    private final InventoryRepository inventoryRepository;

    public ByteArrayInputStream generateExcelReport() throws IOException {
        try (Workbook workbook = new XSSFWorkbook()) {

            // Sheet 1: Inventory Summary
            Sheet inventorySheet = workbook.createSheet("Inventory Summary");
            Row header = inventorySheet.createRow(0);
            header.createCell(0).setCellValue("Goods Name");
            header.createCell(1).setCellValue("Quantity");
            header.createCell(2).setCellValue("Warehouse Location");

            List<Inventory> inventories = inventoryRepository.findAll();
            int rowIdx = 1;
            for (Inventory item : inventories) {
                Row row = inventorySheet.createRow(rowIdx++);
                row.createCell(0).setCellValue(item.getGoods().getName());
                row.createCell(1).setCellValue(item.getQuantity());
                row.createCell(2).setCellValue(item.getWarehouseLocation());
            }

            // Sheet 2: Rejected Goods
            Sheet rejectedSheet = workbook.createSheet("Rejected Goods");
            Row rejectHeader = rejectedSheet.createRow(0);
            rejectHeader.createCell(0).setCellValue("Goods Name");
            rejectHeader.createCell(1).setCellValue("Comment");

            List<Goods> rejectedGoods = goodsRepository.findByStatus("REJECTED");
            int rejectIdx = 1;
            for (Goods goods : rejectedGoods) {
                GoodsReview review = goods.getGoodsReview();
                Row row = rejectedSheet.createRow(rejectIdx++);
                row.createCell(0).setCellValue(goods.getName());
                row.createCell(1).setCellValue(review != null ? review.getComment() : "N/A");
            }

            ByteArrayOutputStream out = new ByteArrayOutputStream();
            workbook.write(out);
            return new ByteArrayInputStream(out.toByteArray());
        }
    }
}


---

2. ReportController.java

package org.policy.controller;

import lombok.RequiredArgsConstructor;
import org.policy.service.ReportService;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.io.ByteArrayInputStream;
import java.io.IOException;

@RestController
@RequestMapping("/api/reports")
@RequiredArgsConstructor
public class ReportController {

    private final ReportService reportService;

    @GetMapping("/excel")
    public ResponseEntity<InputStreamResource> downloadExcel() throws IOException {
        ByteArrayInputStream in = reportService.generateExcelReport();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Disposition", "attachment; filename=report.xlsx");

        return ResponseEntity.ok()
                .headers(headers)
                .contentType(MediaType.APPLICATION_OCTET_STREAM)
                .body(new InputStreamResource(in));
    }
}


---

3. Updated: GoodsRepository.java

Add this method:

import java.util.List;

public interface GoodsRepository extends JpaRepository<Goods, Long> {
    List<Goods> findByStatus(String status); // Added for report filtering
}


---

Let me know if you want:

Unit tests

Angular integration for the download button

Proceed to Day 9: Warehouse Management backend setup



