Great! Since you’re starting Frontend Day 1, the focus is on setting up the Angular project and preparing it for development.


---

Day 1: Frontend Setup and Requirements Analysis

1. Project Initialization

Command:

ng new inventory-management --style=scss --routing
cd inventory-management


---

2. Install Required Dependencies

npm install primeng primeicons
npm install @angular/forms @ngrx/store @ngrx/effects @ngrx/store-devtools
npm install --save @ngx-translate/core @ngx-translate/http-loader


---

3. Project Folder Structure

src/
├── app/
│   ├── core/
│   │   ├── services/
│   │   ├── models/
│   │   └── guards/
│   ├── shared/
│   │   ├── components/
│   │   ├── directives/
│   │   └── pipes/
│   ├── auth/
│   │   ├── login/
│   │   ├── register/
│   ├── dashboard/
│   │   ├── user/
│   │   ├── admin/
│   │   └── coordinator/
│   ├── store/
│   │   ├── actions/
│   │   ├── reducers/
│   │   ├── effects/
│   │   └── selectors/
│   ├── app.component.html
│   ├── app.component.ts
│   └── app.module.ts
├── assets/
│   └── i18n/
│       └── en.json
├── environments/
│   ├── environment.ts
│   └── environment.prod.ts


---

4. Basic Setup

app.module.ts

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { HttpClientModule } from '@angular/common/http';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';

// PrimeNG Modules
import { ButtonModule } from 'primeng/button';
import { InputTextModule } from 'primeng/inputtext';

// NgRx
import { StoreModule } from '@ngrx/store';
import { EffectsModule } from '@ngrx/effects';
import { StoreDevtoolsModule } from '@ngrx/store-devtools';

@NgModule({
  declarations: [AppComponent],
  imports: [
    BrowserModule,
    BrowserAnimationsModule,
    AppRoutingModule,
    HttpClientModule,
    FormsModule,
    ReactiveFormsModule,
    ButtonModule,
    InputTextModule,
    StoreModule.forRoot({}),
    EffectsModule.forRoot([]),
    StoreDevtoolsModule.instrument({ maxAge: 25 }),
  ],
  providers: [],
  bootstrap: [AppComponent],
})
export class AppModule {}


---

5. Routing Configuration

app-routing.module.ts

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

const routes: Routes = [
  { path: '', redirectTo: 'auth/login', pathMatch: 'full' },
  {
    path: 'auth',
    loadChildren: () =>
      import('./auth/auth.module').then((m) => m.AuthModule),
  },
  {
    path: 'dashboard',
    loadChildren: () =>
      import('./dashboard/dashboard.module').then((m) => m.DashboardModule),
  },
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule],
})
export class AppRoutingModule {}


---

6. Environment Configuration

environment.ts

export const environment = {
  production: false,
  apiUrl: 'http://localhost:8080/api',
};


---

Would you like me to generate code for auth/login and register components next (for Day 2 frontend)?
