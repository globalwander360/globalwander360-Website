Great! Based on your requirements, here's the full backend setup for the GoodsReview feature, including:

Database table via Liquibase XML

Java Entity

DTO

Mapper

Repository

Service + Impl

Controller


1. Liquibase XML: goods_review.xml

<changeSet id="create-goods-review" author="yourname">
    <createTable tableName="goods_review">
        <column name="id" type="BIGINT" autoIncrement="true">
            <constraints primaryKey="true"/>
        </column>
        <column name="goods_id" type="BIGINT">
            <constraints nullable="false"/>
        </column>
        <column name="status" type="VARCHAR(20)">
            <constraints nullable="false"/>
        </column>
        <column name="comment" type="VARCHAR(500)"/>
        <column name="reviewed_at" type="TIMESTAMP" defaultValueComputed="CURRENT_TIMESTAMP"/>
    </createTable>

    <addForeignKeyConstraint 
        baseTableName="goods_review" 
        baseColumnNames="goods_id"
        constraintName="fk_goods_review_goods"
        referencedTableName="goods"
        referencedColumnNames="id"/>
</changeSet>


---

2. Entity: GoodsReview.java

package org.policy.entity;

import jakarta.persistence.*;
import lombok.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "goods_review")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class GoodsReview {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Enumerated(EnumType.STRING)
    private GoodsStatus status;

    @Column(length = 500)
    private String comment;

    private LocalDateTime reviewedAt = LocalDateTime.now();

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "goods_id")
    private Goods goods;
}


---

3. Enum: GoodsStatus.java

package org.policy.enums;

public enum GoodsStatus {
    PENDING,
    APPROVED,
    REJECTED
}


---

4. DTO: GoodsReviewDto.java

package org.policy.dto;

import lombok.Data;
import org.policy.enums.GoodsStatus;

@Data
public class GoodsReviewDto {
    private Long id;
    private Long goodsId;
    private GoodsStatus status;
    private String comment;
}


---

5. Mapper: GoodsReviewMapper.java

package org.policy.mapper;

import org.policy.dto.GoodsReviewDto;
import org.policy.entity.Goods;
import org.policy.entity.GoodsReview;
import org.springframework.stereotype.Component;

@Component
public class GoodsReviewMapper {

    public GoodsReview toEntity(GoodsReviewDto dto, Goods goods) {
        GoodsReview review = new GoodsReview();
        review.setStatus(dto.getStatus());
        review.setComment(dto.getComment());
        review.setGoods(goods);
        return review;
    }

    public GoodsReviewDto toDto(GoodsReview review) {
        GoodsReviewDto dto = new GoodsReviewDto();
        dto.setId(review.getId());
        dto.setGoodsId(review.getGoods().getId());
        dto.setStatus(review.getStatus());
        dto.setComment(review.getComment());
        return dto;
    }
}


---

6. Repository: GoodsReviewRepository.java

package org.policy.repository;

import org.policy.entity.GoodsReview;
import org.springframework.data.jpa.repository.JpaRepository;

public interface GoodsReviewRepository extends JpaRepository<GoodsReview, Long> {
}


---

7. Service Interface: GoodsReviewService.java

package org.policy.service;

import org.policy.dto.GoodsReviewDto;

import java.util.List;

public interface GoodsReviewService {
    GoodsReviewDto reviewGoods(GoodsReviewDto dto);
    List<GoodsReviewDto> getAllReviews();
}


---

8. Service Implementation: GoodsReviewServiceImpl.java

package org.policy.service.impl;

import lombok.RequiredArgsConstructor;
import org.policy.dto.GoodsReviewDto;
import org.policy.entity.Goods;
import org.policy.entity.GoodsReview;
import org.policy.enums.GoodsStatus;
import org.policy.mapper.GoodsReviewMapper;
import org.policy.repository.GoodsRepository;
import org.policy.repository.GoodsReviewRepository;
import org.policy.service.GoodsReviewService;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class GoodsReviewServiceImpl implements GoodsReviewService {

    private final GoodsReviewRepository reviewRepo;
    private final GoodsRepository goodsRepo;
    private final GoodsReviewMapper mapper;

    @Override
    public GoodsReviewDto reviewGoods(GoodsReviewDto dto) {
        Goods goods = goodsRepo.findById(dto.getGoodsId())
            .orElseThrow(() -> new NoSuchElementException("Goods not found"));

        if (dto.getStatus() == GoodsStatus.REJECTED && (dto.getComment() == null || dto.getComment().isBlank())) {
            throw new IllegalArgumentException("Comment is required when rejecting goods");
        }

        goods.setStatus(dto.getStatus().name());
        goodsRepo.save(goods);

        GoodsReview review = mapper.toEntity(dto, goods);
        return mapper.toDto(reviewRepo.save(review));
    }

    @Override
    public List<GoodsReviewDto> getAllReviews() {
        return reviewRepo.findAll().stream().map(mapper::toDto).collect(Collectors.toList());
    }
}


---

9. Controller: GoodsReviewController.java

package org.policy.controller;

import lombok.RequiredArgsConstructor;
import org.policy.dto.GoodsReviewDto;
import org.policy.service.GoodsReviewService;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/reviews")
@RequiredArgsConstructor
public class GoodsReviewController {

    private final GoodsReviewService reviewService;

    @PostMapping
    public GoodsReviewDto review(@RequestBody GoodsReviewDto dto) {
        return reviewService.reviewGoods(dto);
    }

    @GetMapping
    public List<GoodsReviewDto> getAll() {
        return reviewService.getAllReviews();
    }
}


---

Optional: Goods Entity Update (if needed)

Make sure your Goods entity has a status field like this:

@Column(length = 20)
private String status;

Let me know if you want the Angular frontend for this (Logistics Coordinator: review UI).
