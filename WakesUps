Great! Here’s the Day 3 folder and file structure for the backend (Spring Boot) implementation of the Goods Registration functionality.


---

Folder Structure (Backend - Spring Boot)

src
└── main
    └── java
        └── org
            └── policy
                ├── controller
                │   └── GoodsController.java
                ├── dto
                │   └── GoodsDTO.java
                ├── entity
                │   └── Goods.java
                ├── mapper
                │   └── GoodsMapper.java
                ├── repository
                │   └── GoodsRepository.java
                └── service
                    ├── GoodsService.java
                    └── impl
                        └── GoodsServiceImpl.java


---

1. GoodsDTO.java

package org.policy.dto;

import lombok.*;
import java.time.LocalDate;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class GoodsDTO {
    private Long id;
    private String name;
    private Integer quantity;
    private String unitOfMeasure;
    private String location;
    private LocalDate expiryDate;
    private LocalDate acquisitionDate;
    private Integer minimumStockLevel;
    private Double price;
    private String supplier;
    private String status;
    private Long categoryId;
    private Long userId;
}


---

2. Goods.java

(Assuming already created, but restating for context)

package org.policy.entity;

import jakarta.persistence.*;
import lombok.*;
import java.time.LocalDate;

@Entity
@Table(name = "goods")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Goods {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private Integer quantity;

    @Column(name = "unit_of_measure")
    private String unitOfMeasure;

    private String location;

    @Column(name = "expiry_date")
    private LocalDate expiryDate;

    @Column(name = "acquisition_date")
    private LocalDate acquisitionDate;

    @Column(name = "minimum_stock_level")
    private Integer minimumStockLevel;

    private Double price;
    private String supplier;
    private String status;

    @ManyToOne
    @JoinColumn(name = "user_id")
    private AppUser user;

    @ManyToOne
    @JoinColumn(name = "category_id")
    private Category category;
}


---

3. GoodsRepository.java

package org.policy.repository;

import org.policy.entity.Goods;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;

public interface GoodsRepository extends JpaRepository<Goods, Long> {
    List<Goods> findByUserId(Long userId);
}


---

4. GoodsMapper.java

package org.policy.mapper;

import org.policy.dto.GoodsDTO;
import org.policy.entity.Category;
import org.policy.entity.Goods;
import org.policy.entity.AppUser;
import org.springframework.stereotype.Component;

@Component
public class GoodsMapper {

    public Goods toEntity(GoodsDTO dto, Category category, AppUser user) {
        return Goods.builder()
                .id(dto.getId())
                .name(dto.getName())
                .quantity(dto.getQuantity())
                .unitOfMeasure(dto.getUnitOfMeasure())
                .location(dto.getLocation())
                .expiryDate(dto.getExpiryDate())
                .acquisitionDate(dto.getAcquisitionDate())
                .minimumStockLevel(dto.getMinimumStockLevel())
                .price(dto.getPrice())
                .supplier(dto.getSupplier())
                .status(dto.getStatus())
                .category(category)
                .user(user)
                .build();
    }

    public GoodsDTO toDto(Goods goods) {
        return GoodsDTO.builder()
                .id(goods.getId())
                .name(goods.getName())
                .quantity(goods.getQuantity())
                .unitOfMeasure(goods.getUnitOfMeasure())
                .location(goods.getLocation())
                .expiryDate(goods.getExpiryDate())
                .acquisitionDate(goods.getAcquisitionDate())
                .minimumStockLevel(goods.getMinimumStockLevel())
                .price(goods.getPrice())
                .supplier(goods.getSupplier())
                .status(goods.getStatus())
                .categoryId(goods.getCategory().getId())
                .userId(goods.getUser().getId())
                .build();
    }
}


---

5. GoodsService.java

package org.policy.service;

import org.policy.dto.GoodsDTO;
import java.util.List;

public interface GoodsService {
    GoodsDTO createGoods(GoodsDTO dto);
    List<GoodsDTO> getMyGoods(Long userId);
    GoodsDTO findById(Long id);
}


---

6. GoodsServiceImpl.java

package org.policy.service.impl;

import lombok.RequiredArgsConstructor;
import org.policy.dto.GoodsDTO;
import org.policy.entity.Category;
import org.policy.entity.Goods;
import org.policy.entity.AppUser;
import org.policy.mapper.GoodsMapper;
import org.policy.repository.CategoryRepository;
import org.policy.repository.GoodsRepository;
import org.policy.repository.UserRepository;
import org.policy.service.GoodsService;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class GoodsServiceImpl implements GoodsService {

    private final GoodsRepository goodsRepository;
    private final GoodsMapper goodsMapper;
    private final UserRepository userRepository;
    private final CategoryRepository categoryRepository;

    @Override
    public GoodsDTO createGoods(GoodsDTO dto) {
        AppUser user = userRepository.findById(dto.getUserId())
                .orElseThrow(() -> new RuntimeException("User not found"));
        Category category = categoryRepository.findById(dto.getCategoryId())
                .orElseThrow(() -> new RuntimeException("Category not found"));

        Goods goods = goodsMapper.toEntity(dto, category, user);
        goods.setStatus("PENDING");

        return goodsMapper.toDto(goodsRepository.save(goods));
    }

    @Override
    public List<GoodsDTO> getMyGoods(Long userId) {
        return goodsRepository.findByUserId(userId)
                .stream()
                .map(goodsMapper::toDto)
                .collect(Collectors.toList());
    }

    @Override
    public GoodsDTO findById(Long id) {
        return goodsRepository.findById(id)
                .map(goodsMapper::toDto)
                .orElseThrow(() -> new RuntimeException("Goods not found"));
    }
}


---

7. GoodsController.java

package org.policy.controller;

import lombok.RequiredArgsConstructor;
import org.policy.dto.GoodsDTO;
import org.policy.service.GoodsService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/goods")
@RequiredArgsConstructor
public class GoodsController {

    private final GoodsService goodsService;

    @PostMapping
    public ResponseEntity<GoodsDTO> createGoods(@RequestBody GoodsDTO dto) {
        return ResponseEntity.ok(goodsService.createGoods(dto));
    }

    @GetMapping("/my/{userId}")
    public ResponseEntity<List<GoodsDTO>> getMyGoods(@PathVariable Long userId) {
        return ResponseEntity.ok(goodsService.getMyGoods(userId));
    }

    @GetMapping("/{id}")
    public ResponseEntity<GoodsDTO> findById(@PathVariable Long id) {
        return ResponseEntity.ok(goodsService.findById(id));
    }
}


---

Let me know if you want the Angular structure for Day 3 or if you need help with front-end integration!

