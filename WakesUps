Here’s the complete backend structure and all remaining code for Day 3: Goods Registration (User).


---

Day 3 Folder Structure

src
└── main
    └── java
        └── org
            └── policy
                ├── controller
                │   └── GoodsController.java
                ├── dto
                │   └── GoodsDTO.java
                ├── mapper
                │   └── GoodsMapper.java
                ├── repository
                │   └── GoodsRepository.java
                └── service
                    └── GoodsService.java


---

1. GoodsDTO.java

package org.policy.dto;

import lombok.*;
import java.time.LocalDate;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class GoodsDTO {
    private Long id;
    private String name;
    private Long categoryId;
    private Integer quantity;
    private String unitOfMeasure;
    private String location;
    private LocalDate expiryDate;
    private LocalDate acquisitionDate;
    private Integer minimumStockLevel;
    private Double price;
    private String supplier;
    private String status;
    private Long userId;
}


---

2. GoodsMapper.java

package org.policy.mapper;

import org.policy.dto.GoodsDTO;
import org.policy.entity.Category;
import org.policy.entity.Goods;
import org.policy.entity.AppUser;
import org.springframework.stereotype.Component;

@Component
public class GoodsMapper {

    public GoodsDTO toDTO(Goods goods) {
        return GoodsDTO.builder()
                .id(goods.getId())
                .name(goods.getName())
                .categoryId(goods.getCategory().getId())
                .quantity(goods.getQuantity())
                .unitOfMeasure(goods.getUnitOfMeasure())
                .location(goods.getLocation())
                .expiryDate(goods.getExpiryDate())
                .acquisitionDate(goods.getAcquisitionDate())
                .minimumStockLevel(goods.getMinimumStockLevel())
                .price(goods.getPrice())
                .supplier(goods.getSupplier())
                .status(goods.getStatus())
                .userId(goods.getUser().getId())
                .build();
    }

    public Goods toEntity(GoodsDTO dto, AppUser user, Category category) {
        return Goods.builder()
                .id(dto.getId())
                .name(dto.getName())
                .category(category)
                .quantity(dto.getQuantity())
                .unitOfMeasure(dto.getUnitOfMeasure())
                .location(dto.getLocation())
                .expiryDate(dto.getExpiryDate())
                .acquisitionDate(dto.getAcquisitionDate())
                .minimumStockLevel(dto.getMinimumStockLevel())
                .price(dto.getPrice())
                .supplier(dto.getSupplier())
                .status("PENDING")
                .user(user)
                .build();
    }
}


---

3. GoodsRepository.java

package org.policy.repository;

import org.policy.entity.Goods;
import org.policy.entity.AppUser;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface GoodsRepository extends JpaRepository<Goods, Long> {
    List<Goods> findByUser(AppUser user);
}


---

4. GoodsService.java

package org.policy.service;

import org.policy.dto.GoodsDTO;
import org.policy.entity.AppUser;
import org.policy.entity.Category;
import org.policy.entity.Goods;
import org.policy.mapper.GoodsMapper;
import org.policy.repository.AppUserRepository;
import org.policy.repository.CategoryRepository;
import org.policy.repository.GoodsRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class GoodsService {

    @Autowired
    private GoodsRepository goodsRepository;

    @Autowired
    private AppUserRepository userRepository;

    @Autowired
    private CategoryRepository categoryRepository;

    @Autowired
    private GoodsMapper goodsMapper;

    public GoodsDTO createGoods(GoodsDTO dto) {
        AppUser user = userRepository.findById(dto.getUserId())
                .orElseThrow(() -> new RuntimeException("User not found"));

        Category category = categoryRepository.findById(dto.getCategoryId())
                .orElseThrow(() -> new RuntimeException("Category not found"));

        Goods goods = goodsMapper.toEntity(dto, user, category);
        return goodsMapper.toDTO(goodsRepository.save(goods));
    }

    public List<GoodsDTO> getGoodsByUser(Long userId) {
        AppUser user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));
        return goodsRepository.findByUser(user)
                .stream()
                .map(goodsMapper::toDTO)
                .collect(Collectors.toList());
    }
}


---

5. GoodsController.java

package org.policy.controller;

import org.policy.dto.GoodsDTO;
import org.policy.service.GoodsService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/goods")
@CrossOrigin(origins = "*")
public class GoodsController {

    @Autowired
    private GoodsService goodsService;

    @PostMapping
    public ResponseEntity<GoodsDTO> createGoods(@RequestBody GoodsDTO dto) {
        return ResponseEntity.ok(goodsService.createGoods(dto));
    }

    @GetMapping("/user/{userId}")
    public ResponseEntity<List<GoodsDTO>> getGoodsByUser(@PathVariable Long userId) {
        return ResponseEntity.ok(goodsService.getGoodsByUser(userId));
    }
}


---

Let me know if you need:

Angular form code for Day 3

Validation annotations or custom error messages

File for AppUserRepository.java or any shared resources


If everything is working well now, I’ll prepare you for Day 5: Quality Check.
