Here is the complete backend structure and source code for Day 7: Reporting - Backend Logic using Spring Boot, H2, and Liquibase. This module uses native queries and Spring Data JPA to generate reports.


---

Backend Structure (Folder & Files)

org.policy
│
├── controller
│   └── ReportController.java
│
├── dto
│   └── ReportDto.java
│
├── entity
│   └── (No changes)
│
├── repository
│   └── ReportRepository.java
│
├── service
│   └── ReportService.java
│
├── Liquibase
│   └── db.changelog-<date>-report.xml


---

1. ReportController.java

package org.policy.controller;

import lombok.RequiredArgsConstructor;
import org.policy.dto.ReportDto;
import org.policy.service.ReportService;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/reports")
@RequiredArgsConstructor
public class ReportController {

    private final ReportService reportService;

    @GetMapping("/goods-by-category")
    public List<ReportDto.CategoryGoodsCount> getGoodsCountByCategory() {
        return reportService.getGoodsCountByCategory();
    }

    @GetMapping("/status-summary")
    public ReportDto.StatusSummary getStatusSummary() {
        return reportService.getStatusSummary();
    }

    @GetMapping("/rejection-summary")
    public List<ReportDto.RejectionReason> getRejectionSummary() {
        return reportService.getRejectionSummary();
    }
}


---

2. ReportService.java

package org.policy.service;

import lombok.RequiredArgsConstructor;
import org.policy.dto.ReportDto;
import org.policy.repository.ReportRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class ReportService {

    private final ReportRepository repository;

    public List<ReportDto.CategoryGoodsCount> getGoodsCountByCategory() {
        return repository.fetchGoodsByCategory();
    }

    public ReportDto.StatusSummary getStatusSummary() {
        return repository.fetchStatusSummary();
    }

    public List<ReportDto.RejectionReason> getRejectionSummary() {
        return repository.fetchRejectionReasons();
    }
}


---

3. ReportRepository.java

package org.policy.repository;

import org.policy.dto.ReportDto;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.Repository;

import java.util.List;

public interface ReportRepository extends Repository<Object, Long> {

    @Query("SELECT new org.policy.dto.ReportDto.CategoryGoodsCount(c.name, COUNT(g)) " +
           "FROM Goods g JOIN g.category c GROUP BY c.name")
    List<ReportDto.CategoryGoodsCount> fetchGoodsByCategory();

    @Query("SELECT new org.policy.dto.ReportDto.StatusSummary(" +
           "SUM(CASE WHEN g.status = 'APPROVED' THEN 1 ELSE 0 END), " +
           "SUM(CASE WHEN g.status = 'REJECTED' THEN 1 ELSE 0 END), " +
           "SUM(CASE WHEN g.status = 'PENDING' THEN 1 ELSE 0 END)) " +
           "FROM Goods g")
    ReportDto.StatusSummary fetchStatusSummary();

    @Query("SELECT new org.policy.dto.ReportDto.RejectionReason(r.comment, COUNT(r)) " +
           "FROM GoodsReview r WHERE r.status = 'REJECTED' GROUP BY r.comment")
    List<ReportDto.RejectionReason> fetchRejectionReasons();
}


---

4. ReportDto.java

package org.policy.dto;

import lombok.AllArgsConstructor;
import lombok.Data;

import java.io.Serializable;

public class ReportDto {

    @Data
    @AllArgsConstructor
    public static class CategoryGoodsCount implements Serializable {
        private String categoryName;
        private Long totalGoods;
    }

    @Data
    @AllArgsConstructor
    public static class StatusSummary implements Serializable {
        private Long approved;
        private Long rejected;
        private Long pending;
    }

    @Data
    @AllArgsConstructor
    public static class RejectionReason implements Serializable {
        private String reason;
        private Long count;
    }
}


---

5. Liquibase XML - db.changelog-report.xml

<changeSet id="2025-04-16-01" author="dev">
    <comment>Initial data for reports testing</comment>
    <insert tableName="category">
        <column name="id" value="1"/>
        <column name="name" value="Electronics"/>
    </insert>
    <insert tableName="goods">
        <column name="id" value="1"/>
        <column name="name" value="Laptop"/>
        <column name="quantity" value="10"/>
        <column name="category_id" value="1"/>
        <column name="status" value="APPROVED"/>
    </insert>
    <insert tableName="goods_review">
        <column name="id" value="1"/>
        <column name="goods_id" value="1"/>
        <column name="status" value="REJECTED"/>
        <column name="comment" value="Packaging damage"/>
    </insert>
</changeSet>


---

Let me know if you want the corresponding JSON outputs for these reports as well.



Here are sample JSON responses for the reporting APIs of Day 7: Reporting - Backend Logic:


---

1. GET /api/reports/goods-by-category

Returns total registered goods count grouped by category.

JSON Response:

[
  {
    "categoryName": "Electronics",
    "totalGoods": 12
  },
  {
    "categoryName": "Furniture",
    "totalGoods": 8
  },
  {
    "categoryName": "Clothing",
    "totalGoods": 5
  }
]


---

2. GET /api/reports/status-summary

Returns count of approved, rejected, and pending goods.

JSON Response:

{
  "approved": 15,
  "rejected": 4,
  "pending": 6
}


---

3. GET /api/reports/rejection-summary

Returns count of rejection reasons from goods reviews.

JSON Response:

[
  {
    "reason": "Packaging damage",
    "count": 2
  },
  {
    "reason": "Missing barcode",
    "count": 1
  },
  {
    "reason": "Incorrect specifications",
    "count": 1
  }
]


---

Let me know if you'd like mock input data for testing or Excel export logic next.

To implement Day 8: Generate Excel Reports (Admin) in your Inventory Management system, here's the complete structure and source code for generating Excel reports, including the Inventory Summary and Rejected Goods with comments.

1. Project Structure:

src/
 ├── main/
     ├── java/
         ├── com/
             ├── yourapp/
                 ├── controller/
                     └── ReportController.java       (Controller for the report generation)
                 ├── service/
                     └── ReportService.java         (Service to handle the logic for report generation)
                 ├── dto/
                     └── InventorySummaryDto.java   (DTO for inventory summary report)
                     └── RejectedGoodsDto.java      (DTO for rejected goods report)
                 ├── repository/
                     └── InventoryRepository.java   (Repository for inventory data)
                     └── GoodsReviewRepository.java (Repository for rejected goods)
                 ├── model/
                     └── Inventory.java             (Entity for inventory)
                     └── GoodsReview.java          (Entity for goods review)


---

2. Dependencies in pom.xml:

Add dependencies for Excel report generation (Apache POI) and Spring Boot.

<dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>poi-ooxml</artifactId>
    <version>5.2.3</version>
</dependency>


---

3. DTO Files:

InventorySummaryDto.java:

package com.yourapp.dto;

public class InventorySummaryDto {
    private String goodsName;
    private int quantity;
    private String warehouseLocation;
    private double price;

    // Getters and Setters
}

RejectedGoodsDto.java:

package com.yourapp.dto;

public class RejectedGoodsDto {
    private String goodsName;
    private String reason;
    private String comment;

    // Getters and Setters
}


---

4. Entity Classes:

Inventory.java (Entity)

package com.yourapp.model;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;

@Entity
public class Inventory {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String goodsName;
    private int quantity;
    private String warehouseLocation;
    private double price;

    // Getters and Setters
}

GoodsReview.java (Entity)

package com.yourapp.model;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;

@Entity
public class GoodsReview {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String goodsName;
    private String reason;
    private String comment;
    private String status; // APPROVED or REJECTED

    // Getters and Setters
}


---

5. Service Class:

ReportService.java

package com.yourapp.service;

import com.yourapp.dto.InventorySummaryDto;
import com.yourapp.dto.RejectedGoodsDto;
import com.yourapp.model.Inventory;
import com.yourapp.model.GoodsReview;
import com.yourapp.repository.InventoryRepository;
import com.yourapp.repository.GoodsReviewRepository;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.util.List;

@Service
public class ReportService {

    @Autowired
    private InventoryRepository inventoryRepository;

    @Autowired
    private GoodsReviewRepository goodsReviewRepository;

    public ByteArrayOutputStream generateInventorySummaryReport() {
        List<Inventory> inventoryList = inventoryRepository.findAll();
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Inventory Summary");

        Row headerRow = sheet.createRow(0);
        headerRow.createCell(0).setCellValue("Goods Name");
        headerRow.createCell(1).setCellValue("Quantity");
        headerRow.createCell(2).setCellValue("Warehouse Location");
        headerRow.createCell(3).setCellValue("Price");

        int rowNum = 1;
        for (Inventory inventory : inventoryList) {
            Row row = sheet.createRow(rowNum++);
            row.createCell(0).setCellValue(inventory.getGoodsName());
            row.createCell(1).setCellValue(inventory.getQuantity());
            row.createCell(2).setCellValue(inventory.getWarehouseLocation());
            row.createCell(3).setCellValue(inventory.getPrice());
        }

        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        try {
            workbook.write(outputStream);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return outputStream;
    }

    public ByteArrayOutputStream generateRejectedGoodsReport() {
        List<GoodsReview> rejectedGoodsList = goodsReviewRepository.findByStatus("REJECTED");
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Rejected Goods");

        Row headerRow = sheet.createRow(0);
        headerRow.createCell(0).setCellValue("Goods Name");
        headerRow.createCell(1).setCellValue("Reason");
        headerRow.createCell(2).setCellValue("Comment");

        int rowNum = 1;
        for (GoodsReview goodsReview : rejectedGoodsList) {
            Row row = sheet.createRow(rowNum++);
            row.createCell(0).setCellValue(goodsReview.getGoodsName());
            row.createCell(1).setCellValue(goodsReview.getReason());
            row.createCell(2).setCellValue(goodsReview.getComment());
        }

        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        try {
            workbook.write(outputStream);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return outputStream;
    }
}


---

6. Controller Class:

ReportController.java

package com.yourapp.controller;

import com.yourapp.service.ReportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.io.ByteArrayOutputStream;

@RestController
@RequestMapping("/api/reports")
public class ReportController {

    @Autowired
    private ReportService reportService;

    @GetMapping("/inventory-summary")
    public ResponseEntity<byte[]> downloadInventorySummaryReport() {
        ByteArrayOutputStream byteArrayOutputStream = reportService.generateInventorySummaryReport();
        return ResponseEntity.ok()
                .header("Content-Disposition", "attachment; filename=inventory_summary.xlsx")
                .body(byteArrayOutputStream.toByteArray());
    }

    @GetMapping("/rejected-goods")
    public ResponseEntity<byte[]> downloadRejectedGoodsReport() {
        ByteArrayOutputStream byteArrayOutputStream = reportService.generateRejectedGoodsReport();
        return ResponseEntity.ok()
                .header("Content-Disposition", "attachment; filename=rejected_goods.xlsx")
                .body(byteArrayOutputStream.toByteArray());
    }
}


---

7. Repository Classes:

InventoryRepository.java

package com.yourapp.repository;

import com.yourapp.model.Inventory;
import org.springframework.data.jpa.repository.JpaRepository;

public interface InventoryRepository extends JpaRepository<Inventory, Long> {
}

GoodsReviewRepository.java

package com.yourapp.repository;

import com.yourapp.model.GoodsReview;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface GoodsReviewRepository extends JpaRepository<GoodsReview, Long> {
    List<GoodsReview> findByStatus(String status);
}


---

8. Test and Use Case:

1. Admin Panel Button:

In your Admin dashboard (frontend), you can add buttons that will trigger the GET API calls for downloading the reports. For instance:

Inventory Summary Report

Rejected Goods Report




2. API Endpoints:

/api/reports/inventory-summary → Downloads the Inventory Summary report.

/api/reports/rejected-goods → Downloads the Rejected Goods report.





---

Conclusion:

With this structure and code, you can generate two Excel reports:

1. Inventory Summary: It contains details of goods in the inventory.


2. Rejected Goods: It contains details of rejected goods and reasons.



Let me know if you need further assistance or changes!

