Great! Here’s the Day 3 folder and file structure for the backend (Spring Boot) implementation of the Goods Registration functionality.


---

Folder Structure (Backend - Spring Boot)

src
└── main
    └── java
        └── org
            └── policy
                ├── controller
                │   └── GoodsController.java
                ├── dto
                │   └── GoodsDTO.java
                ├── entity
                │   └── Goods.java
                ├── mapper
                │   └── GoodsMapper.java
                ├── repository
                │   └── GoodsRepository.java
                └── service
                    ├── GoodsService.java
                    └── impl
                        └── GoodsServiceImpl.java


---

1. GoodsDTO.java

package org.policy.dto;

import lombok.*;
import java.time.LocalDate;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class GoodsDTO {
    private Long id;
    private String name;
    private Integer quantity;
    private String unitOfMeasure;
    private String location;
    private LocalDate expiryDate;
    private LocalDate acquisitionDate;
    private Integer minimumStockLevel;
    private Double price;
    private String supplier;
    private String status;
    private Long categoryId;
    private Long userId;
}


---

2. Goods.java

(Assuming already created, but restating for context)

package org.policy.entity;

import jakarta.persistence.*;
import lombok.*;
import java.time.LocalDate;

@Entity
@Table(name = "goods")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Goods {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private Integer quantity;

    @Column(name = "unit_of_measure")
    private String unitOfMeasure;

    private String location;

    @Column(name = "expiry_date")
    private LocalDate expiryDate;

    @Column(name = "acquisition_date")
    private LocalDate acquisitionDate;

    @Column(name = "minimum_stock_level")
    private Integer minimumStockLevel;

    private Double price;
    private String supplier;
    private String status;

    @ManyToOne
    @JoinColumn(name = "user_id")
    private AppUser user;

    @ManyToOne
    @JoinColumn(name = "category_id")
    private Category category;
}


---

3. GoodsRepository.java

package org.policy.repository;

import org.policy.entity.Goods;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;

public interface GoodsRepository extends JpaRepository<Goods, Long> {
    List<Goods> findByUserId(Long userId);
}


---

4. GoodsMapper.java

package org.policy.mapper;

import org.policy.dto.GoodsDTO;
import org.policy.entity.Category;
import org.policy.entity.Goods;
import org.policy.entity.AppUser;
import org.springframework.stereotype.Component;

@Component
public class GoodsMapper {

    public Goods toEntity(GoodsDTO dto, Category category, AppUser user) {
        return Goods.builder()
                .id(dto.getId())
                .name(dto.getName())
                .quantity(dto.getQuantity())
                .unitOfMeasure(dto.getUnitOfMeasure())
                .location(dto.getLocation())
                .expiryDate(dto.getExpiryDate())
                .acquisitionDate(dto.getAcquisitionDate())
                .minimumStockLevel(dto.getMinimumStockLevel())
                .price(dto.getPrice())
                .supplier(dto.getSupplier())
                .status(dto.getStatus())
                .category(category)
                .user(user)
                .build();
    }

    public Goods
