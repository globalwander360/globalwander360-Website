Absolutely! Here's your Day 10: Backend structure and full updated source code for implementing Advanced Filtering, Pagination, and Sorting in your Inventory Management Module using Spring Boot. All new files created specifically for Day 10 filtering include the word filter in their filenames.


---

Backend Folder Structure (Day 10 Specific)

src/main/java/org/policy/
├── controller/
│   └── InventoryFilterController.java        <-- Day 10
├── dto/
│   ├── InventoryFilterRequestDto.java        <-- Day 10
│   └── InventoryFilterResponseDto.java       <-- Day 10
├── entity/
│   └── GoodsStatus.java                      <-- Shared enum
├── repository/
│   └── InventoryRepository.java              <-- Modified for Day 10
├── service/
│   └── InventoryFilterService.java           <-- Day 10


---

1. GoodsStatus.java

package org.policy.entity;

public enum GoodsStatus {
    PENDING,
    APPROVED,
    REJECTED
}


---

2. InventoryFilterRequestDto.java

package org.policy.dto;

import lombok.Data;
import org.policy.entity.GoodsStatus;

import java.time.LocalDate;

@Data
public class InventoryFilterRequestDto {
    private GoodsStatus status;
    private String category;
    private String warehouse;
    private LocalDate startDate;
    private LocalDate endDate;
    private String sortBy = "dateAdded";
    private String sortDirection = "desc";
    private int page = 0;
    private int size = 10;
}


---

3. InventoryFilterResponseDto.java

package org.policy.dto;

import lombok.AllArgsConstructor;
import lombok.Data;

import java.time.LocalDate;

@Data
@AllArgsConstructor
public class InventoryFilterResponseDto {
    private String goodsName;
    private String categoryName;
    private Integer quantity;
    private String warehouseLocation;
    private LocalDate dateAdded;
    private String status;
}


---

4. InventoryRepository.java

package org.policy.repository;

import org.policy.entity.Inventory;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;

public interface InventoryRepository extends JpaRepository<Inventory, Long>, JpaSpecificationExecutor<Inventory> {
}


---

5. InventoryFilterService.java

package org.policy.service;

import lombok.RequiredArgsConstructor;
import org.policy.dto.InventoryFilterRequestDto;
import org.policy.dto.InventoryFilterResponseDto;
import org.policy.entity.Inventory;
import org.policy.repository.InventoryRepository;
import org.springframework.data.domain.*;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import jakarta.persistence.criteria.Join;
import java.util.ArrayList;
import java.util.List;

@Service
@RequiredArgsConstructor
public class InventoryFilterService {

    private final InventoryRepository inventoryRepository;

    public Page<InventoryFilterResponseDto> filterInventory(InventoryFilterRequestDto request) {
        Specification<Inventory> spec = (root, query, cb) -> {
            List<javax.persistence.criteria.Predicate> predicates = new ArrayList<>();

            if (request.getStatus() != null) {
                predicates.add(cb.equal(root.get("goods").get("status"), request.getStatus()));
            }

            if (request.getCategory() != null) {
                Join<Object, Object> category = root.get("goods").join("category");
                predicates.add(cb.equal(category.get("name"), request.getCategory()));
            }

            if (request.getWarehouse() != null) {
                predicates.add(cb.equal(root.get("warehouseLocation"), request.getWarehouse()));
            }

            if (request.getStartDate() != null && request.getEndDate() != null) {
                predicates.add(cb.between(root.get("dateAdded"), request.getStartDate(), request.getEndDate()));
            }

            return cb.and(predicates.toArray(new javax.persistence.criteria.Predicate[0]));
        };

        Sort sort = Sort.by(Sort.Direction.fromString(request.getSortDirection()), request.getSortBy());
        Pageable pageable = PageRequest.of(request.getPage(), request.getSize(), sort);

        return inventoryRepository.findAll(spec, pageable).map(i -> new InventoryFilterResponseDto(
                i.getGoods().getName(),
                i.getGoods().getCategory().getName(),
                i.getQuantity(),
                i.getWarehouseLocation(),
                i.getDateAdded(),
                i.getGoods().getStatus().toString()
        ));
    }
}


---

6. InventoryFilterController.java

package org.policy.controller;

import lombok.RequiredArgsConstructor;
import org.policy.dto.InventoryFilterRequestDto;
import org.policy.dto.InventoryFilterResponseDto;
import org.policy.service.InventoryFilterService;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/inventory/filter")
@RequiredArgsConstructor
public class InventoryFilterController {

    private final InventoryFilterService inventoryFilterService;

    @PostMapping
    public Page<InventoryFilterResponseDto> filterInventory(@RequestBody InventoryFilterRequestDto request) {
        return inventoryFilterService.filterInventory(request);
    }
}


---

Liquibase Note

Ensure your existing Liquibase changelogs for inventory, goods, category, and warehouse tables include:

goods.status (enum field)

goods.category_id

inventory.warehouse_location

inventory.date_added



---

Let me know if you want the frontend filters and pagination UI in Angular or updated Liquibase changelog files as well!



Got it — you're seeing a red error on jakarta.persistence.criteria.* (especially on Join, Predicate, or Specification). This is due to missing dependencies in your pom.xml.

Let’s fix it step by step:


---

✅ 1. Add the Required Dependency in pom.xml

You need the Jakarta Persistence API and Spring Data JPA support for Specifications.

Please make sure your pom.xml contains the following dependencies:

<!-- JPA API (needed for CriteriaBuilder, Predicate, Join, etc.) -->
<dependency>
    <groupId>jakarta.persistence</groupId>
    <artifactId>jakarta.persistence-api</artifactId>
    <version>3.1.0</version>
</dependency>

<!-- Spring Data JPA (required for JpaSpecificationExecutor, Specification) -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>

Then reload Maven by right-clicking your project in IntelliJ or using:

./mvnw clean install


---

✅ 2. Use Correct Imports in InventoryFilterService

Make sure these are your imports:

import org.springframework.data.jpa.domain.Specification;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Join;

And not anything like:

import javax.persistence.criteria.Predicate; // ❌ Don't use this if you're on Jakarta 3+


---

✅ 3. IDE Red Line Fix

If it’s still red after adding dependencies:

Right-click project > Maven > Reimport

Invalidate caches and restart (File > Invalidate Caches / Restart)



---

If you want, I can generate a full working pom.xml for you including H2, Liquibase, Spring Boot, and JPA — just say the word!

