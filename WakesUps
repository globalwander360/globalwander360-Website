Great! Let's move on to Day 10: Advanced Filtering and Pagination for the backend.


---

Day 10 Backend Structure

Objective: Add filtering, sorting, and pagination to Goods and Inventory listing endpoints.

New or Updated Files

src/main/java/org/policy/
│
├── controller/
│   ├── GoodsController.java         // Updated
│   └── InventoryController.java     // New
│
├── dto/
│   └── FilterRequest.java           // New (for dynamic filters)
│
├── repository/
│   ├── GoodsRepository.java         // Updated
│   └── InventoryRepository.java     // New
│
├── service/
│   ├── GoodsService.java            // Updated
│   ├── InventoryService.java        // New
│   └── impl/
│       ├── GoodsServiceImpl.java    // Updated
│       └── InventoryServiceImpl.java// New


---

1. FilterRequest.java

package org.policy.dto;

import lombok.Data;
import java.time.LocalDate;

@Data
public class FilterRequest {
    private String status;
    private Long categoryId;
    private Long warehouseId;
    private LocalDate fromDate;
    private LocalDate toDate;
    private String sortBy = "id";
    private String direction = "asc";
    private int page = 0;
    private int size = 10;
}


---

2. GoodsRepository.java (Updated)

@Repository
public interface GoodsRepository extends JpaRepository<Goods, Long>, JpaSpecificationExecutor<Goods> {
}


---

3. InventoryRepository.java (New)

@Repository
public interface InventoryRepository extends JpaRepository<Inventory, Long>, JpaSpecificationExecutor<Inventory> {
}


---

4. GoodsService.java (Updated)

Page<GoodsDto> getFilteredGoods(FilterRequest filterRequest);


---

5. GoodsServiceImpl.java (Updated)

@Override
public Page<GoodsDto> getFilteredGoods(FilterRequest request) {
    Pageable pageable = PageRequest.of(
        request.getPage(),
        request.getSize(),
        Sort.by(Sort.Direction.fromString(request.getDirection()), request.getSortBy())
    );

    Specification<Goods> spec = (root, query, cb) -> {
        List<Predicate> predicates = new ArrayList<>();
        if (request.getStatus() != null) {
            predicates.add(cb.equal(root.get("status"), request.getStatus()));
        }
        if (request.getCategoryId() != null) {
            predicates.add(cb.equal(root.get("category").get("id"), request.getCategoryId()));
        }
        if (request.getFromDate() != null && request.getToDate() != null) {
            predicates.add(cb.between(root.get("acquisitionDate"), request.getFromDate(), request.getToDate()));
        }
        return cb.and(predicates.toArray(new Predicate[0]));
    };

    Page<Goods> result = goodsRepository.findAll(spec, pageable);
    return result.map(goodsMapper::toDto);
}


---

6. InventoryService.java (New)

Page<InventoryDto> getFilteredInventory(FilterRequest request);


---

7. InventoryServiceImpl.java (New)

@Service
@RequiredArgsConstructor
public class InventoryServiceImpl implements InventoryService {

    private final InventoryRepository inventoryRepository;
    private final InventoryMapper inventoryMapper;

    @Override
    public Page<InventoryDto> getFilteredInventory(FilterRequest request) {
        Pageable pageable = PageRequest.of(
            request.getPage(),
            request.getSize(),
            Sort.by(Sort.Direction.fromString(request.getDirection()), request.getSortBy())
        );

        Specification<Inventory> spec = (root, query, cb) -> {
            List<Predicate> predicates = new ArrayList<>();
            if (request.getWarehouseId() != null) {
                predicates.add(cb.equal(root.get("warehouse").get("id"), request.getWarehouseId()));
            }
            if (request.getFromDate() != null && request.getToDate() != null) {
                predicates.add(cb.between(root.get("dateAdded"), request.getFromDate(), request.getToDate()));
            }
            return cb.and(predicates.toArray(new Predicate[0]));
        };

        Page<Inventory> result = inventoryRepository.findAll(spec, pageable);
        return result.map(inventoryMapper::toDto);
    }
}


---

8. GoodsController.java (Updated)

@PostMapping("/filter")
public ResponseEntity<Page<GoodsDto>> filterGoods(@RequestBody FilterRequest filterRequest) {
    return ResponseEntity.ok(goodsService.getFilteredGoods(filterRequest));
}


---

9. InventoryController.java (New)

@RestController
@RequestMapping("/api/inventory")
@RequiredArgsConstructor
public class InventoryController {

    private final InventoryService inventoryService;

    @PostMapping("/filter")
    public ResponseEntity<Page<InventoryDto>> filterInventory(@RequestBody FilterRequest request) {
        return ResponseEntity.ok(inventoryService.getFilteredInventory(request));
    }
}


---

Summary: Day 10 Done

Added dynamic filtering, sorting, pagination to Goods and Inventory

Used JpaSpecificationExecutor for flexibility

Centralized filtering in FilterRequest

All updates were appended to existing files with no breaking changes


Would you like Postman test samples or proceed to Day 11 (if you’re planning more)?

