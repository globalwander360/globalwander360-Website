Here's the complete backend structure and full source code for Day 4: Category Management (Admin). This includes the remaining components: DTO, Mapper, Service, Controller.


---

Folder Structure

src
└── main
    └── java
        └── org
            └── policy
                ├── controller
                │   └── CategoryController.java
                ├── dto
                │   └── CategoryDTO.java
                ├── entity
                │   └── Category.java         // already created
                ├── mapper
                │   └── CategoryMapper.java
                ├── repository
                │   └── CategoryRepository.java
                └── service
                    └── CategoryService.java


---

1. CategoryDTO.java

package org.policy.dto;

import lombok.*;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class CategoryDTO {
    private Long id;
    private String name;
    private String description;
    private String storageRequirements;
    private Boolean isPerishable;
    private Integer shelfLife;
}


---

2. CategoryMapper.java

package org.policy.mapper;

import org.policy.dto.CategoryDTO;
import org.policy.entity.Category;
import org.springframework.stereotype.Component;

@Component
public class CategoryMapper {

    public CategoryDTO toDTO(Category category) {
        return CategoryDTO.builder()
                .id(category.getId())
                .name(category.getName())
                .description(category.getDescription())
                .storageRequirements(category.getStorageRequirements())
                .isPerishable(category.getIsPerishable())
                .shelfLife(category.getShelfLife())
                .build();
    }

    public Category toEntity(CategoryDTO dto) {
        return Category.builder()
                .id(dto.getId())
                .name(dto.getName())
                .description(dto.getDescription())
                .storageRequirements(dto.getStorageRequirements())
                .isPerishable(dto.getIsPerishable())
                .shelfLife(dto.getShelfLife())
                .build();
    }
}


---

3. CategoryRepository.java

package org.policy.repository;

import org.policy.entity.Category;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface CategoryRepository extends JpaRepository<Category, Long> {
    Optional<Category> findByName(String name);
    boolean existsByName(String name);
}


---

4. CategoryService.java

package org.policy.service;

import org.policy.dto.CategoryDTO;
import org.policy.entity.Category;
import org.policy.mapper.CategoryMapper;
import org.policy.repository.CategoryRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class CategoryService {

    @Autowired
    private CategoryRepository categoryRepository;

    @Autowired
    private CategoryMapper categoryMapper;

    public CategoryDTO createCategory(CategoryDTO dto) {
        if (categoryRepository.existsByName(dto.getName())) {
            throw new RuntimeException("Category name must be unique");
        }
        Category category = categoryMapper.toEntity(dto);
        return categoryMapper.toDTO(categoryRepository.save(category));
    }

    public List<CategoryDTO> getAllCategories() {
        return categoryRepository.findAll()
                .stream()
                .map(categoryMapper::toDTO)
                .collect(Collectors.toList());
    }
}


---

5. CategoryController.java

package org.policy.controller;

import org.policy.dto.CategoryDTO;
import org.policy.service.CategoryService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/categories")
@CrossOrigin(origins = "*")
public class CategoryController {

    @Autowired
    private CategoryService categoryService;

    @PostMapping
    public ResponseEntity<CategoryDTO> createCategory(@RequestBody CategoryDTO dto) {
        return ResponseEntity.ok(categoryService.createCategory(dto));
    }

    @GetMapping
    public ResponseEntity<List<CategoryDTO>> getAllCategories() {
        return ResponseEntity.ok(categoryService.getAllCategories());
    }
}


---

Let me know if you also want:

Angular frontend form + integration

Update/delete APIs

Custom exceptions or validation handling


Ready to move on to Day 5: Quality Check (Logistics Coordinator)?
