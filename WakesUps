Thanks for sharing the full code. The issue is caused by this line in your ReportRepository:

public interface ReportRepository extends Repository<Object, Long>

This is incorrect because Object is not a managed entity. Spring Data needs a concrete entity class (like Goods or GoodsReview) as the domain type in your repository interface. Since your queries involve both Goods and GoodsReview, the best practice is to extend JpaRepository<Goods, Long> (or any one valid entity), and write custom queries.


---

✅ Here's the updated and working version:

Updated ReportRepository.java

package org.policy.repository;

import org.policy.dto.ReportDto;
import org.policy.entity.Goods;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import java.util.List;

public interface ReportRepository extends JpaRepository<Goods, Long> {

    @Query("SELECT new org.policy.dto.ReportDto.CategoryGoodsCount(c.name, COUNT(g)) " +
           "FROM Goods g JOIN g.category c GROUP BY c.name")
    List<ReportDto.CategoryGoodsCount> fetchGoodsByCategory();

    @Query("SELECT new org.policy.dto.ReportDto.StatusSummary(" +
           "SUM(CASE WHEN g.status = 'APPROVED' THEN 1 ELSE 0 END), " +
           "SUM(CASE WHEN g.status = 'REJECTED' THEN 1 ELSE 0 END), " +
           "SUM(CASE WHEN g.status = 'PENDING' THEN 1 ELSE 0 END)) " +
           "FROM Goods g")
    ReportDto.StatusSummary fetchStatusSummary();

    @Query("SELECT new org.policy.dto.ReportDto.RejectionReason(r.comment, COUNT(r)) " +
           "FROM GoodsReview r WHERE r.status = 'REJECTED' GROUP BY r.comment")
    List<ReportDto.RejectionReason> fetchRejectionReasons();
}


---

Notes:

extends JpaRepository<Goods, Long> ensures Goods is a managed JPA entity.

If you're running into Not a managed type: class java.lang.Object, it's because of the Repository<Object, Long>, which is invalid.

This updated version fixes the Spring Boot bean creation issue.



---

Let me know if you're using a different structure (e.g., base repository), and I’ll tailor it accordingly.

