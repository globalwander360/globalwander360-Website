Yes! Based on our previous discussion, your Day 3 tasks in the Inventory Management Module involve updating and verifying the following components related to Goods and Category:


---

Day 3 Tasks Recap

1. Mapper classes

GoodsMapper.java

CategoryMapper.java



2. Service

GoodsService.java (ensure it has toEntity, findById, and uses the mapper correctly)



3. Unit Tests

GoodsServiceTest.java (mocking, verifying behavior, assertions)





---

Updated Project Structure for Day 3

src/
└── main/
    └── java/
        └── com/example/inventory/
            ├── controller/
            │   └── GoodsController.java        # (Coming up in Day 4)
            ├── dto/
            │   ├── CategoryDTO.java
            │   └── GoodsDTO.java
            ├── entity/
            │   ├── Category.java
            │   └── Goods.java
            ├── mapper/
            │   ├── CategoryMapper.java        # Day 3
            │   └── GoodsMapper.java           # Day 3
            ├── repository/
            │   ├── CategoryRepository.java
            │   └── GoodsRepository.java
            └── service/
                └── GoodsService.java          # Day 3
└── test/
    └── java/
        └── com/example/inventory/service/
            └── GoodsServiceTest.java         # Day 3


---

Day 3 Full Code

1. CategoryMapper.java

package com.example.inventory.mapper;

import com.example.inventory.dto.CategoryDTO;
import com.example.inventory.entity.Category;
import org.springframework.stereotype.Component;

@Component
public class CategoryMapper {

    public Category toEntity(CategoryDTO dto) {
        if (dto == null) return null;

        Category entity = new Category();
        entity.setId(dto.getId());
        entity.setName(dto.getName());
        entity.setDescription(dto.getDescription());
        entity.setStorageRequirements(dto.getStorageRequirements());
        entity.setIsPerishable(dto.getIsPerishable());
        entity.setShelfLife(dto.getShelfLife());
        return entity;
    }

    public CategoryDTO toDto(Category entity) {
        if (entity == null) return null;

        CategoryDTO dto = new CategoryDTO();
        dto.setId(entity.getId());
        dto.setName(entity.getName());
        dto.setDescription(entity.getDescription());
        dto.setStorageRequirements(entity.getStorageRequirements());
        dto.setIsPerishable(entity.getIsPerishable());
        dto.setShelfLife(entity.getShelfLife());
        return dto;
    }
}


---

2. GoodsMapper.java

package com.example.inventory.mapper;

import com.example.inventory.dto.GoodsDTO;
import com.example.inventory.entity.Category;
import com.example.inventory.entity.Goods;
import com.example.inventory.repository.CategoryRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class GoodsMapper {

    @Autowired
    private CategoryRepository categoryRepository;

    public Goods toEntity(GoodsDTO dto) {
        if (dto == null) return null;

        Goods goods = new Goods();
        goods.setId(dto.getId());
        goods.setName(dto.getName());
        goods.setQuantity(dto.getQuantity());
        goods.setUnitOfMeasure(dto.getUnitOfMeasure());
        goods.setLocation(dto.getLocation());
        goods.setExpiryDate(dto.getExpiryDate());
        goods.setAcquisitionDate(dto.getAcquisitionDate());
        goods.setMinimumStockLevel(dto.getMinimumStockLevel());
        goods.setPrice(dto.getPrice());
        goods.setSupplier(dto.getSupplier());
        goods.setStatus(dto.getStatus());

        if (dto.getCategoryId() != null) {
            Category category = categoryRepository.findById(dto.getCategoryId()).orElse(null);
            goods.setCategory(category);
        }

        return goods;
    }

    public GoodsDTO toDto(Goods goods) {
        if (goods == null) return null;

        GoodsDTO dto = new GoodsDTO();
        dto.setId(goods.getId());
        dto.setName(goods.getName());
        dto.setQuantity(goods.getQuantity());
        dto.setUnitOfMeasure(goods.getUnitOfMeasure());
        dto.setLocation(goods.getLocation());
        dto.setExpiryDate(goods.getExpiryDate());
        dto.setAcquisitionDate(goods.getAcquisitionDate());
        dto.setMinimumStockLevel(goods.getMinimumStockLevel());
        dto.setPrice(goods.getPrice());
        dto.setSupplier(goods.getSupplier());
        dto.setStatus(goods.getStatus());

        if (goods.getCategory() != null) {
            dto.setCategoryId(goods.getCategory().getId());
        }

        return dto;
    }
}


---

3. GoodsService.java

package com.example.inventory.service;

import com.example.inventory.dto.GoodsDTO;
import com.example.inventory.entity.Goods;
import com.example.inventory.mapper.GoodsMapper;
import com.example.inventory.repository.GoodsRepository;
import jakarta.persistence.EntityNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class GoodsService {

    @Autowired
    private GoodsRepository goodsRepository;

    @Autowired
    private GoodsMapper goodsMapper;

    public GoodsDTO findById(Long id) {
        Goods goods = goodsRepository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("Goods not found with id: " + id));
        return goodsMapper.toDto(goods);
    }

    public Goods toEntity(GoodsDTO dto) {
        return goodsMapper.toEntity(dto);
    }

    // Add more methods like save, update, delete as needed in later days
}


---

4. GoodsServiceTest.java

package com.example.inventory.service;

import com.example.inventory.dto.GoodsDTO;
import com.example.inventory.entity.Goods;
import com.example.inventory.mapper.GoodsMapper;
import com.example.inventory.repository.GoodsRepository;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class GoodsServiceTest {

    @Mock
    private GoodsRepository goodsRepository;

    @Mock
    private GoodsMapper goodsMapper;

    @InjectMocks
    private GoodsService goodsService;

    @Test
    void testFindById() {
        Goods goods = new Goods();
        goods.setId(1L);

        GoodsDTO dto = new GoodsDTO();
        dto.setId(1L);

        when(goodsRepository.findById(1L)).thenReturn(Optional.of(goods));
        when(goodsMapper.toDto(goods)).thenReturn(dto);

        GoodsDTO result = goodsService.findById(1L);

        assertEquals(1L, result.getId());
        verify(goodsRepository).findById(1L);
        verify(goodsMapper).toDto(goods);
    }
}


---

Let me know if you'd like to proceed with Day 4 (which includes Controller, additional Service methods like create, update, and test coverage for those).

