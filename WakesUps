Here’s your complete backend structure and full source code for Goods Registration, based on:

Package: org.policy

Entity: User (not AppUser)

DTO: GoodDTO (not GoodsDto)

Service implementation inside impl folder



---

Backend Structure

src/
└── main/
    └── java/
        └── org/
            └── policy/
                ├── controller/
                │   └── GoodsController.java
                ├── dto/
                │   └── GoodDTO.java
                ├── entity/
                │   ├── Goods.java
                │   ├── Category.java
                │   └── User.java
                ├── mapper/
                │   └── GoodsMapper.java
                ├── repository/
                │   └── GoodsRepository.java
                ├── service/
                │   └── GoodsService.java
                └── service/impl/
                    └── GoodsServiceImpl.java


---

1. Goods.java

package org.policy.entity;

import jakarta.persistence.*;
import lombok.*;
import java.time.LocalDate;

@Entity
@Table(name = "goods")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Goods {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private Integer quantity;

    @Column(name = "unit_of_measure")
    private String unitOfMeasure;

    private String location;

    @Column(name = "expiry_date")
    private LocalDate expiryDate;

    @Column(name = "acquisition_date")
    private LocalDate acquisitionDate;

    @Column(name = "minimum_stock_level")
    private Integer minimumStockLevel;

    private Double price;
    private String supplier;
    private String status;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id")
    private User user;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "category_id")
    private Category category;
}


---

2. GoodDTO.java

package org.policy.dto;

import lombok.Data;
import java.time.LocalDate;

@Data
public class GoodDTO {
    private Long id;
    private String name;
    private Integer quantity;
    private String unitOfMeasure;
    private String location;
    private LocalDate expiryDate;
    private LocalDate acquisitionDate;
    private Integer minimumStockLevel;
    private Double price;
    private String supplier;
    private String status;
    private Long userId;
    private Long categoryId;
}


---

3. GoodsMapper.java

package org.policy.mapper;

import org.policy.dto.GoodDTO;
import org.policy.entity.Category;
import org.policy.entity.Goods;
import org.policy.entity.User;
import org.springframework.stereotype.Component;

@Component
public class GoodsMapper {

    public Goods toEntity(GoodDTO dto, User user, Category category) {
        Goods goods = new Goods();
        goods.setId(dto.getId());
        goods.setName(dto.getName());
        goods.setQuantity(dto.getQuantity());
        goods.setUnitOfMeasure(dto.getUnitOfMeasure());
        goods.setLocation(dto.getLocation());
        goods.setExpiryDate(dto.getExpiryDate());
        goods.setAcquisitionDate(dto.getAcquisitionDate());
        goods.setMinimumStockLevel(dto.getMinimumStockLevel());
        goods.setPrice(dto.getPrice());
        goods.setSupplier(dto.getSupplier());
        goods.setStatus(dto.getStatus());
        goods.setUser(user);
        goods.setCategory(category);
        return goods;
    }

    public GoodDTO toDto(Goods goods) {
        GoodDTO dto = new GoodDTO();
        dto.setId(goods.getId());
        dto.setName(goods.getName());
        dto.setQuantity(goods.getQuantity());
        dto.setUnitOfMeasure(goods.getUnitOfMeasure());
        dto.setLocation(goods.getLocation());
        dto.setExpiryDate(goods.getExpiryDate());
        dto.setAcquisitionDate(goods.getAcquisitionDate());
        dto.setMinimumStockLevel(goods.getMinimumStockLevel());
        dto.setPrice(goods.getPrice());
        dto.setSupplier(goods.getSupplier());
        dto.setStatus(goods.getStatus());
        dto.setUserId(goods.getUser().getId());
        dto.setCategoryId(goods.getCategory().getId());
        return dto;
    }
}


---

4. GoodsRepository.java

package org.policy.repository;

import org.policy.entity.Goods;
import org.springframework.data.jpa.repository.JpaRepository;

public interface GoodsRepository extends JpaRepository<Goods, Long> {
}


---

5. GoodsService.java

package org.policy.service;

import org.policy.dto.GoodDTO;
import java.util.List;

public interface GoodsService {
    GoodDTO create(GoodDTO dto);
    GoodDTO update(Long id, GoodDTO dto);
    GoodDTO getById(Long id);
    List<GoodDTO> getAll();
    void delete(Long id);
}


---

6. GoodsServiceImpl.java

package org.policy.service.impl;

import lombok.RequiredArgsConstructor;
import org.policy.dto.GoodDTO;
import org.policy.entity.Category;
import org.policy.entity.Goods;
import org.policy.entity.User;
import org.policy.mapper.GoodsMapper;
import org.policy.repository.CategoryRepository;
import org.policy.repository.GoodsRepository;
import org.policy.repository.UserRepository;
import org.policy.service.GoodsService;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class GoodsServiceImpl implements GoodsService {

    private final GoodsRepository goodsRepository;
    private final UserRepository userRepository;
    private final CategoryRepository categoryRepository;
    private final GoodsMapper goodsMapper;

    @Override
    public GoodDTO create(GoodDTO dto) {
        User user = userRepository.findById(dto.getUserId()).orElseThrow();
        Category category = categoryRepository.findById(dto.getCategoryId()).orElseThrow();
        Goods goods = goodsMapper.toEntity(dto, user, category);
        return goodsMapper.toDto(goodsRepository.save(goods));
    }

    @Override
    public GoodDTO update(Long id, GoodDTO dto) {
        Goods existing = goodsRepository.findById(id).orElseThrow();
        User user = userRepository.findById(dto.getUserId()).orElseThrow();
        Category category = categoryRepository.findById(dto.getCategoryId()).orElseThrow();
        Goods updated = goodsMapper.toEntity(dto, user, category);
        updated.setId(id);
        return goodsMapper.toDto(goodsRepository.save(updated));
    }

    @Override
    public GoodDTO getById(Long id) {
        return goodsRepository.findById(id)
                .map(goodsMapper::toDto)
                .orElseThrow();
    }

    @Override
    public List<GoodDTO> getAll() {
        return goodsRepository.findAll()
                .stream()
                .map(goodsMapper::toDto)
                .collect(Collectors.toList());
    }

    @Override
    public void delete(Long id) {
        goodsRepository.deleteById(id);
    }
}


---

7. GoodsController.java

package org.policy.controller;

import lombok.RequiredArgsConstructor;
import org.policy.dto.GoodDTO;
import org.policy.service.GoodsService;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/goods")
@RequiredArgsConstructor
public class GoodsController {

    private final GoodsService goodsService;

    @PostMapping
    public GoodDTO create(@RequestBody GoodDTO dto) {
        return goodsService.create(dto);
    }

    @PutMapping("/{id}")
    public GoodDTO update(@PathVariable Long id, @RequestBody GoodDTO dto) {
        return goodsService.update(id, dto);
    }

    @GetMapping("/{id}")
    public GoodDTO getById(@PathVariable Long id) {
        return goodsService.getById(id);
    }

    @GetMapping
    public List<GoodDTO> getAll() {
        return goodsService.getAll();
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) {
        goodsService.delete(id);
    }
}


---

Would you like the Liquibase changelog file for the goods table or sample JSON for testing the APIs now?



Here’s a sample JSON payload to use for testing your Goods Registration API (POST /api/goods):

Goods Registration JSON Example

{
  "name": "Organic Apples",
  "quantity": 150,
  "unitOfMeasure": "Kilograms",
  "location": "Cold Storage Unit 2",
  "expiryDate": "2025-05-15",
  "acquisitionDate": "2025-04-10",
  "minimumStockLevel": 50,
  "price": 120.50,
  "supplier": "Fresh Farms Ltd.",
  "status": "In Stock",
  "userId": 1,
  "categoryId": 1
}

> Make sure you have a User with id = 1 and a Category with id = 1 in your database. You can change userId and categoryId according to existing records in your tables.



Would you like mock data for multiple goods or categories too?



