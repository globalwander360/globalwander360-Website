Here is the complete backend structure and full updated source code for Day 10: Advanced Filtering and Pagination in your Inventory Management Module using Spring Boot, with support for:

Filtering: by GoodsStatus (enum), category, warehouse, and date range

Pagination

Sorting: by date, quantity, etc.



---

Backend Folder Structure

src/main/java/org/policy/
├── controller/
│   └── InventoryController.java
├── service/
│   └── InventoryService.java
├── dto/
│   ├── InventoryFilterRequest.java
│   └── InventoryResponseDto.java
├── repository/
│   └── InventoryRepository.java
├── entity/
│   ├── Inventory.java
│   └── GoodsStatus.java


---

1. GoodsStatus.java (Enum)

package org.policy.entity;

public enum GoodsStatus {
    PENDING,
    APPROVED,
    REJECTED
}


---

2. InventoryFilterRequest.java

package org.policy.dto;

import lombok.Data;
import org.policy.entity.GoodsStatus;

import java.time.LocalDate;

@Data
public class InventoryFilterRequest {
    private GoodsStatus status;
    private String category;
    private String warehouse;
    private LocalDate startDate;
    private LocalDate endDate;
    private String sortBy = "dateAdded";
    private String sortDirection = "desc";
    private int page = 0;
    private int size = 10;
}


---

3. InventoryResponseDto.java

package org.policy.dto;

import lombok.AllArgsConstructor;
import lombok.Data;

import java.time.LocalDate;

@Data
@AllArgsConstructor
public class InventoryResponseDto {
    private String goodsName;
    private String categoryName;
    private Integer quantity;
    private String warehouseLocation;
    private LocalDate dateAdded;
    private String status;
}


---

4. InventoryRepository.java

package org.policy.repository;

import org.policy.entity.Inventory;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;

public interface InventoryRepository extends JpaRepository<Inventory, Long>, JpaSpecificationExecutor<Inventory> {
}


---

5. InventoryService.java

package org.policy.service;

import lombok.RequiredArgsConstructor;
import org.policy.dto.InventoryFilterRequest;
import org.policy.dto.InventoryResponseDto;
import org.policy.entity.Inventory;
import org.policy.entity.GoodsStatus;
import org.policy.repository.InventoryRepository;
import org.springframework.data.domain.*;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import jakarta.persistence.criteria.Join;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

@Service
@RequiredArgsConstructor
public class InventoryService {

    private final InventoryRepository inventoryRepository;

    public Page<InventoryResponseDto> filterInventory(InventoryFilterRequest request) {
        Specification<Inventory> spec = (root, query, cb) -> {
            List<javax.persistence.criteria.Predicate> predicates = new ArrayList<>();

            if (request.getStatus() != null) {
                predicates.add(cb.equal(root.get("goods").get("status"), request.getStatus()));
            }

            if (request.getCategory() != null) {
                Join<Object, Object> category = root.get("goods").join("category");
                predicates.add(cb.equal(category.get("name"), request.getCategory()));
            }

            if (request.getWarehouse() != null) {
                predicates.add(cb.equal(root.get("warehouseLocation"), request.getWarehouse()));
            }

            if (request.getStartDate() != null && request.getEndDate() != null) {
                predicates.add(cb.between(root.get("dateAdded"), request.getStartDate(), request.getEndDate()));
            }

            return cb.and(predicates.toArray(new javax.persistence.criteria.Predicate[0]));
        };

        Sort sort = Sort.by(Sort.Direction.fromString(request.getSortDirection()), request.getSortBy());
        Pageable pageable = PageRequest.of(request.getPage(), request.getSize(), sort);

        return inventoryRepository.findAll(spec, pageable).map(i -> new InventoryResponseDto(
                i.getGoods().getName(),
                i.getGoods().getCategory().getName(),
                i.getQuantity(),
                i.getWarehouseLocation(),
                i.getDateAdded(),
                i.getGoods().getStatus().toString()
        ));
    }
}


---

6. InventoryController.java

package org.policy.controller;

import lombok.RequiredArgsConstructor;
import org.policy.dto.InventoryFilterRequest;
import org.policy.dto.InventoryResponseDto;
import org.policy.service.InventoryService;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/inventory")
@RequiredArgsConstructor
public class InventoryController {

    private final InventoryService inventoryService;

    @PostMapping("/filter")
    public Page<InventoryResponseDto> filterInventory(@RequestBody InventoryFilterRequest request) {
        return inventoryService.filterInventory(request);
    }
}


---

Liquibase Reminder

Ensure your inventory table and related goods, category fields are correctly created in H2 via Liquibase.


---

Let me know if you want:

Angular frontend filters + pagination UI

Full Liquibase changesets for goods, category, and inventory

Test data for H2


Or if you'd like Day 11 planning!
