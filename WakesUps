Great! Here is the complete backend structure with full internal code for Day 7 (Reporting - Backend Logic) of your Inventory Management Module project.


---

Day 7: Reporting Backend Structure

1. Package Structure

src/main/java/org/policy/
├── controller/
│   └── ReportController.java
├── dto/
│   ├── CategoryGoodsReportDto.java
│   ├── GoodsStatusCountDto.java
│   └── RejectionSummaryDto.java
├── repository/
│   └── ReportRepository.java
├── service/
│   └── ReportService.java
└── InventoryManagementApplication.java


---

2. DTOs

CategoryGoodsReportDto.java

package org.policy.dto;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class CategoryGoodsReportDto {
    private String categoryName;
    private Long totalGoods;
}

GoodsStatusCountDto.java

package org.policy.dto;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class GoodsStatusCountDto {
    private String status;
    private Long count;
}

RejectionSummaryDto.java

package org.policy.dto;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class RejectionSummaryDto {
    private String comment;
    private Long count;
}


---

3. Repository

ReportRepository.java

package org.policy.repository;

import org.policy.dto.CategoryGoodsReportDto;
import org.policy.dto.GoodsStatusCountDto;
import org.policy.dto.RejectionSummaryDto;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.stereotype.Repository;
import org.policy.entity.Goods;

import java.util.List;

@Repository
public interface ReportRepository extends CrudRepository<Goods, Long> {

    @Query("SELECT new org.policy.dto.CategoryGoodsReportDto(c.name, COUNT(g)) " +
           "FROM Goods g JOIN g.category c GROUP BY c.name")
    List<CategoryGoodsReportDto> countGoodsByCategory();

    @Query("SELECT new org.policy.dto.GoodsStatusCountDto(g.status, COUNT(g)) " +
           "FROM Goods g GROUP BY g.status")
    List<GoodsStatusCountDto> countGoodsByStatus();

    @Query("SELECT new org.policy.dto.RejectionSummaryDto(r.comment, COUNT(r)) " +
           "FROM GoodsReview r WHERE r.status = 'REJECTED' GROUP BY r.comment")
    List<RejectionSummaryDto> rejectionSummary();
}


---

4. Service

ReportService.java

package org.policy.service;

import lombok.RequiredArgsConstructor;
import org.policy.dto.CategoryGoodsReportDto;
import org.policy.dto.GoodsStatusCountDto;
import org.policy.dto.RejectionSummaryDto;
import org.policy.repository.ReportRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class ReportService {

    private final ReportRepository reportRepository;

    public List<CategoryGoodsReportDto> getGoodsByCategory() {
        return reportRepository.countGoodsByCategory();
    }

    public List<GoodsStatusCountDto> getGoodsStatusCounts() {
        return reportRepository.countGoodsByStatus();
    }

    public List<RejectionSummaryDto> getRejectionReasons() {
        return reportRepository.rejectionSummary();
    }
}


---

5. Controller

ReportController.java

package org.policy.controller;

import lombok.RequiredArgsConstructor;
import org.policy.dto.CategoryGoodsReportDto;
import org.policy.dto.GoodsStatusCountDto;
import org.policy.dto.RejectionSummaryDto;
import org.policy.service.ReportService;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/report")
@RequiredArgsConstructor
public class ReportController {

    private final ReportService reportService;

    @GetMapping("/category")
    public List<CategoryGoodsReportDto> getGoodsByCategory() {
        return reportService.getGoodsByCategory();
    }

    @GetMapping("/status")
    public List<GoodsStatusCountDto> getGoodsStatusCounts() {
        return reportService.getGoodsStatusCounts();
    }

    @GetMapping("/rejections")
    public List<RejectionSummaryDto> getRejectionReasons() {
        return reportService.getRejectionReasons();
    }
}


---

Let me know when you're ready to start Day 8 (Generate Excel Reports) and I’ll give you that full backend code too.

