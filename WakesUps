Great! For Day 5: Quality Check (Logistics Coordinator), we’ll implement backend functionality for reviewing goods (approve/reject), update goods status, and save review details.


---

Backend Folder Structure (Additions for Day 5)

src/
└── main/
    └── java/
        └── org/
            └── policy/
                ├── controller/
                │   └── GoodsReviewController.java
                ├── dto/
                │   └── GoodsReviewRequestDto.java
                ├── mapper/
                │   └── GoodsReviewMapper.java
                ├── repository/
                │   └── GoodsReviewRepository.java
                ├── service/
                │   ├── GoodsReviewService.java
                │   └── impl/
                │       └── GoodsReviewServiceImpl.java


---

1. GoodsReviewRequestDto.java

package org.policy.dto;

import lombok.Data;

import java.time.LocalDate;

@Data
public class GoodsReviewRequestDto {
    private Long goodsId;
    private String status; // APPROVED or REJECTED
    private String comment;
    private LocalDate reviewDate;
}


---

2. GoodsReviewMapper.java

package org.policy.mapper;

import org.policy.dto.GoodsReviewRequestDto;
import org.policy.entity.Goods;
import org.policy.entity.GoodsReview;
import org.springframework.stereotype.Component;

@Component
public class GoodsReviewMapper {

    public GoodsReview toEntity(GoodsReviewRequestDto dto, Goods goods) {
        return GoodsReview.builder()
                .goods(goods)
                .status(dto.getStatus())
                .comment(dto.getComment())
                .reviewDate(dto.getReviewDate())
                .build();
    }
}


---

3. GoodsReviewRepository.java

package org.policy.repository;

import org.policy.entity.GoodsReview;
import org.springframework.data.jpa.repository.JpaRepository;

public interface GoodsReviewRepository extends JpaRepository<GoodsReview, Long> {
    boolean existsByGoodsId(Long goodsId);
}


---

4. GoodsReviewService.java

package org.policy.service;

import org.policy.dto.GoodsReviewRequestDto;

public interface GoodsReviewService {
    void reviewGoods(GoodsReviewRequestDto reviewRequestDto);
}


---

5. GoodsReviewServiceImpl.java

package org.policy.service.impl;

import lombok.RequiredArgsConstructor;
import org.policy.dto.GoodsReviewRequestDto;
import org.policy.entity.Goods;
import org.policy.entity.GoodsReview;
import org.policy.mapper.GoodsReviewMapper;
import org.policy.repository.GoodsRepository;
import org.policy.repository.GoodsReviewRepository;
import org.policy.service.GoodsReviewService;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;

@Service
@RequiredArgsConstructor
public class GoodsReviewServiceImpl implements GoodsReviewService {

    private final GoodsReviewRepository reviewRepository;
    private final GoodsRepository goodsRepository;
    private final GoodsReviewMapper reviewMapper;

    @Override
    @Transactional
    public void reviewGoods(GoodsReviewRequestDto dto) {
        if (reviewRepository.existsByGoodsId(dto.getGoodsId())) {
            throw new RuntimeException("Goods already reviewed");
        }

        Optional<Goods> optionalGoods = goodsRepository.findById(dto.getGoodsId());
        if (optionalGoods.isEmpty()) {
            throw new RuntimeException("Goods not found");
        }

        Goods goods = optionalGoods.get();
        goods.setStatus(dto.getStatus()); // Update goods status
        goodsRepository.save(goods); // Save updated status

        GoodsReview review = reviewMapper.toEntity(dto, goods);
        reviewRepository.save(review); // Save review
    }
}


---

6. GoodsReviewController.java

package org.policy.controller;

import lombok.RequiredArgsConstructor;
import org.policy.dto.GoodsReviewRequestDto;
import org.policy.service.GoodsReviewService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/review")
@RequiredArgsConstructor
public class GoodsReviewController {

    private final GoodsReviewService goodsReviewService;

    @PostMapping
    public ResponseEntity<String> reviewGoods(@RequestBody GoodsReviewRequestDto dto) {
        goodsReviewService.reviewGoods(dto);
        return ResponseEntity.ok("Review submitted successfully");
    }
}


---

Updated Code in Existing File

Goods.java (Entity Update)

Make sure this has:

@OneToOne(mappedBy = "goods", cascade = CascadeType.ALL)
private GoodsReview goodsReview;


---

Let me know when you're ready for Day 6, or if you want Angular part of Day 5.

