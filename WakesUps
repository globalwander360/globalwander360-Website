Thanks! Based on your request, here is the updated and complete backend source code for Day 8 with these changes:

Excel download includes both sheets (Inventory Summary & Rejected Goods).

Two separate APIs:

/api/excel-report/inventory-summary

/api/excel-report/rejected-goods


One download API: /api/excel-report/download

Updated DTOs, Controller, and Service logic to support both use cases independently and combined.



---

Backend Folder Structure

src/main/java/org/policy/
├── controller/
│   └── ExcelReportController.java
├── service/
│   └── ExcelReportService.java
├── dto/
│   ├── InventorySummaryDto.java
│   └── RejectedGoodsDto.java
├── repository/
│   ├── InventoryRepository.java
│   └── GoodsReviewRepository.java
├── entity/
│   ├── Inventory.java
│   └── GoodsReview.java


---

1. InventorySummaryDto.java

package org.policy.dto;

import lombok.AllArgsConstructor;
import lombok.Data;

import java.time.LocalDate;

@Data
@AllArgsConstructor
public class InventorySummaryDto {
    private String goodsName;
    private String categoryName;
    private Integer quantity;
    private String warehouseLocation;
    private LocalDate dateAdded;
}


---

2. RejectedGoodsDto.java

package org.policy.dto;

import lombok.AllArgsConstructor;
import lombok.Data;

import java.time.LocalDate;

@Data
@AllArgsConstructor
public class RejectedGoodsDto {
    private Long goodsId;
    private String comment;
    private LocalDate reviewDate;
}


---

3. InventoryRepository.java

package org.policy.repository;

import org.policy.dto.InventorySummaryDto;
import org.policy.entity.Inventory;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;

import java.util.List;

public interface InventoryRepository extends CrudRepository<Inventory, Long> {

    @Query("SELECT new org.policy.dto.InventorySummaryDto(g.name, c.name, i.quantity, i.warehouseLocation, i.dateAdded) " +
           "FROM Inventory i JOIN i.goods g JOIN g.category c")
    List<InventorySummaryDto> getInventorySummary();
}


---

4. GoodsReviewRepository.java

package org.policy.repository;

import org.policy.entity.GoodsReview;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;

import java.util.List;

public interface GoodsReviewRepository extends CrudRepository<GoodsReview, Long> {

    @Query("SELECT r FROM GoodsReview r WHERE r.status = 'REJECTED'")
    List<GoodsReview> findRejectedGoodsWithComments();
}


---

5. ExcelReportService.java

package org.policy.service;

import lombok.RequiredArgsConstructor;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.policy.dto.InventorySummaryDto;
import org.policy.dto.RejectedGoodsDto;
import org.policy.entity.GoodsReview;
import org.policy.repository.GoodsReviewRepository;
import org.policy.repository.InventoryRepository;
import org.springframework.stereotype.Service;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class ExcelReportService {

    private final InventoryRepository inventoryRepository;
    private final GoodsReviewRepository reviewRepository;

    public List<InventorySummaryDto> getInventorySummary() {
        return inventoryRepository.getInventorySummary();
    }

    public List<RejectedGoodsDto> getRejectedGoods() {
        return reviewRepository.findRejectedGoodsWithComments().stream()
                .map(r -> new RejectedGoodsDto(
                        r.getGoods().getId(),
                        r.getComment(),
                        r.getReviewDate()
                ))
                .collect(Collectors.toList());
    }

    public ByteArrayInputStream generateExcelReport() throws Exception {
        List<InventorySummaryDto> inventoryList = getInventorySummary();
        List<RejectedGoodsDto> rejectedGoods = getRejectedGoods();

        try (Workbook workbook = new XSSFWorkbook(); ByteArrayOutputStream out = new ByteArrayOutputStream()) {
            // Sheet 1: Inventory Summary
            Sheet summarySheet = workbook.createSheet("Inventory Summary");
            Row headerRow = summarySheet.createRow(0);
            String[] headers = {"Goods Name", "Category", "Quantity", "Warehouse Location", "Date Added"};

            for (int i = 0; i < headers.length; i++) {
                headerRow.createCell(i).setCellValue(headers[i]);
            }

            int rowIdx = 1;
            for (InventorySummaryDto item : inventoryList) {
                Row row = summarySheet.createRow(rowIdx++);
                row.createCell(0).setCellValue(item.getGoodsName());
                row.createCell(1).setCellValue(item.getCategoryName());
                row.createCell(2).setCellValue(item.getQuantity());
                row.createCell(3).setCellValue(item.getWarehouseLocation());
                row.createCell(4).setCellValue(item.getDateAdded().toString());
            }

            // Sheet 2: Rejected Goods
            Sheet rejectedSheet = workbook.createSheet("Rejected Goods");
            Row rejectedHeader = rejectedSheet.createRow(0);
            String[] rejectHeaders = {"Goods ID", "Comment", "Review Date"};

            for (int i = 0; i < rejectHeaders.length; i++) {
                rejectedHeader.createCell(i).setCellValue(rejectHeaders[i]);
            }

            rowIdx = 1;
            for (RejectedGoodsDto r : rejectedGoods) {
                Row row = rejectedSheet.createRow(rowIdx++);
                row.createCell(0).setCellValue(r.getGoodsId());
                row.createCell(1).setCellValue(r.getComment());
                row.createCell(2).setCellValue(r.getReviewDate().toString());
            }

            workbook.write(out);
            return new ByteArrayInputStream(out.toByteArray());
        }
    }
}


---

6. ExcelReportController.java

package org.policy.controller;

import lombok.RequiredArgsConstructor;
import org.policy.dto.InventorySummaryDto;
import org.policy.dto.RejectedGoodsDto;
import org.policy.service.ExcelReportService;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/excel-report")
@RequiredArgsConstructor
public class ExcelReportController {

    private final ExcelReportService reportService;

    @GetMapping("/inventory-summary")
    public List<InventorySummaryDto> getInventorySummary() {
        return reportService.getInventorySummary();
    }

    @GetMapping("/rejected-goods")
    public List<RejectedGoodsDto> getRejectedGoods() {
        return reportService.getRejectedGoods();
    }

    @GetMapping("/download")
    public ResponseEntity<InputStreamResource> downloadExcelReport() throws Exception {
        var stream = reportService.generateExcelReport();

        return ResponseEntity.ok()
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=report.xlsx")
                .contentType(MediaType.APPLICATION_OCTET_STREAM)
                .body(new InputStreamResource(stream));
    }
}


---

Liquibase Changeset for Inventory Table

<changeSet id="create-inventory-table" author="admin">
    <createTable tableName="inventory">
        <column name="id" type="BIGINT" autoIncrement="true">
            <constraints primaryKey="true"/>
        </column>
        <column name="goods_id" type="BIGINT"/>
        <column name="quantity" type="INT"/>
        <column name="warehouse_location" type="VARCHAR(255)"/>
        <column name="date_added" type="DATE"/>
    </createTable>
    <addForeignKeyConstraint baseTableName="inventory"
                             baseColumnNames="goods_id"
                             referencedTableName="goods"
                             referencedColumnNames="id"
                             constraintName="fk_inventory_goods"/>
</changeSet>


---

This complete structure supports:

Download of combined Excel report

Separate API access to JSON data of Inventory Summary & Rejected Goods

Clean modular DTO, service, and controller design


Let me know if you want the Angular frontend download button or if you're ready to move on to Day 9.

