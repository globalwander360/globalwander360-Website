Great! Let's move to Day 6: Inventory Update (After Approval).
Objective: Insert only approved goods into the inventory table.


---

Day 6 Backend Folder Structure:

src/
└── main/
    ├── java/
    │   └── org/
    │       └── policy/
    │           ├── controller/
    │           │   └── InventoryController.java
    │           ├── dto/
    │           │   └── InventoryDto.java
    │           ├── mapper/
    │           │   └── InventoryMapper.java
    │           ├── repository/
    │           │   └── InventoryRepository.java
    │           ├── service/
    │           │   └── InventoryService.java
    │           └── entity/
    │               └── Inventory.java (Already Done)
    └── resources/
        └── db/
            └── changelog/
                └── db.changelog-master.xml (Already includes Inventory)


---

1. InventoryDto.java

package org.policy.dto;

import lombok.*;

import java.time.LocalDate;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class InventoryDto {
    private Long goodsId;
    private Integer quantity;
    private String warehouseLocation;
    private LocalDate dateAdded;
    private Long warehouseId;
}


---

2. InventoryRepository.java

package org.policy.repository;

import org.policy.entity.Inventory;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface InventoryRepository extends JpaRepository<Inventory, Long> {
    Optional<Inventory> findByGoodsId(Long goodsId);
}


---

3. InventoryMapper.java

package org.policy.mapper;

import org.policy.dto.InventoryDto;
import org.policy.entity.Goods;
import org.policy.entity.Inventory;
import org.policy.entity.Warehouse;
import org.springframework.stereotype.Component;

@Component
public class InventoryMapper {
    public Inventory toEntity(InventoryDto dto, Goods goods, Warehouse warehouse) {
        return Inventory.builder()
                .goods(goods)
                .quantity(dto.getQuantity())
                .warehouseLocation(dto.getWarehouseLocation())
                .dateAdded(dto.getDateAdded())
                .warehouse(warehouse)
                .build();
    }
}


---

4. InventoryService.java

package org.policy.service;

import lombok.RequiredArgsConstructor;
import org.policy.dto.InventoryDto;
import org.policy.entity.Goods;
import org.policy.entity.Inventory;
import org.policy.entity.Warehouse;
import org.policy.mapper.InventoryMapper;
import org.policy.repository.GoodsRepository;
import org.policy.repository.InventoryRepository;
import org.policy.repository.WarehouseRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;

@Service
@RequiredArgsConstructor
public class InventoryService {

    private final InventoryRepository inventoryRepository;
    private final GoodsRepository goodsRepository;
    private final WarehouseRepository warehouseRepository;
    private final InventoryMapper inventoryMapper;

    @Transactional
    public Inventory addToInventory(InventoryDto dto) {
        // Check for duplicate entry
        Optional<Inventory> existing = inventoryRepository.findByGoodsId(dto.getGoodsId());
        if (existing.isPresent()) {
            throw new IllegalStateException("Inventory entry already exists for this goods item.");
        }

        Goods goods = goodsRepository.findById(dto.getGoodsId())
                .orElseThrow(() -> new IllegalArgumentException("Goods not found"));

        if (!"APPROVED".equalsIgnoreCase(goods.getStatus())) {
            throw new IllegalStateException("Only approved goods can be added to inventory.");
        }

        Warehouse warehouse = warehouseRepository.findById(dto.getWarehouseId())
                .orElseThrow(() -> new IllegalArgumentException("Warehouse not found"));

        Inventory inventory = inventoryMapper.toEntity(dto, goods, warehouse);
        return inventoryRepository.save(inventory);
    }
}


---

5. InventoryController.java

package org.policy.controller;

import lombok.RequiredArgsConstructor;
import org.policy.dto.InventoryDto;
import org.policy.entity.Inventory;
import org.policy.service.InventoryService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/inventory")
@RequiredArgsConstructor
public class InventoryController {

    private final InventoryService inventoryService;

    @PostMapping
    public ResponseEntity<Inventory> addInventory(@RequestBody InventoryDto dto) {
        Inventory created = inventoryService.addToInventory(dto);
        return ResponseEntity.ok(created);
    }
}


---

(If Not Created Earlier) WarehouseRepository.java

package org.policy.repository;

import org.policy.entity.Warehouse;
import org.springframework.data.jpa.repository.JpaRepository;

public interface WarehouseRepository extends JpaRepository<Warehouse, Long> {
}


---

✅ Summary:

You can now insert only approved goods into inventory.

Prevents duplicate insertion.

Includes complete InventoryController, InventoryService, InventoryDto, and Mapper.

Uses existing entities: Goods, Warehouse, Inventory.


Let me know if you want to add GET APIs, or shall we move to Day 7 (Reporting Backend Logic)?
