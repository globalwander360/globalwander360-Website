Great! For Day 4: Category Management (Admin), the goal is to allow Admin users to create and manage categories. This includes:

Backend:

Category DTO

Category Mapper

Category Service

Category Controller

CategoryRepository (already created)



Here’s the complete Day 4 project folder structure and code for the backend:


---

Folder Structure (Backend - Spring Boot)

src/main/java/org/policy
│
├── controller
│   └── CategoryController.java
│
├── dto
│   └── CategoryDTO.java
│
├── entity
│   └── Category.java        (Already Created)
│
├── mapper
│   └── CategoryMapper.java
│
├── repository
│   └── CategoryRepository.java  (Already Created)
│
├── service
│   └── CategoryService.java
│
└── InventoryManagementApplication.java


---

1. CategoryDTO.java

package org.policy.dto;

import lombok.Data;

@Data
public class CategoryDTO {
    private Long id;
    private String name;
    private String description;
    private String storageRequirements;
    private Boolean isPerishable;
    private Integer shelfLife;
}


---

2. CategoryMapper.java

package org.policy.mapper;

import org.policy.dto.CategoryDTO;
import org.policy.entity.Category;
import org.springframework.stereotype.Component;

@Component
public class CategoryMapper {

    public Category toEntity(CategoryDTO dto) {
        return Category.builder()
                .id(dto.getId())
                .name(dto.getName())
                .description(dto.getDescription())
                .storageRequirements(dto.getStorageRequirements())
                .isPerishable(dto.getIsPerishable())
                .shelfLife(dto.getShelfLife())
                .build();
    }

    public CategoryDTO toDto(Category entity) {
        CategoryDTO dto = new CategoryDTO();
        dto.setId(entity.getId());
        dto.setName(entity.getName());
        dto.setDescription(entity.getDescription());
        dto.setStorageRequirements(entity.getStorageRequirements());
        dto.setIsPerishable(entity.getIsPerishable());
        dto.setShelfLife(entity.getShelfLife());
        return dto;
    }
}


---

3. CategoryService.java

package org.policy.service;

import lombok.RequiredArgsConstructor;
import org.policy.dto.CategoryDTO;
import org.policy.entity.Category;
import org.policy.mapper.CategoryMapper;
import org.policy.repository.CategoryRepository;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class CategoryService {

    private final CategoryRepository categoryRepository;
    private final CategoryMapper categoryMapper;

    public CategoryDTO create(CategoryDTO dto) {
        Category category = categoryMapper.toEntity(dto);
        return categoryMapper.toDto(categoryRepository.save(category));
    }

    public List<CategoryDTO> getAll() {
        return categoryRepository.findAll()
                .stream()
                .map(categoryMapper::toDto)
                .collect(Collectors.toList());
    }

    public CategoryDTO getById(Long id) {
        return categoryRepository.findById(id)
                .map(categoryMapper::toDto)
                .orElseThrow(() -> new RuntimeException("Category not found"));
    }

    public void delete(Long id) {
        categoryRepository.deleteById(id);
    }

    public CategoryDTO update(Long id, CategoryDTO dto) {
        Category existing = categoryRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Category not found"));
        existing.setName(dto.getName());
        existing.setDescription(dto.getDescription());
        existing.setStorageRequirements(dto.getStorageRequirements());
        existing.setIsPerishable(dto.getIsPerishable());
        existing.setShelfLife(dto.getShelfLife());
        return categoryMapper.toDto(categoryRepository.save(existing));
    }
}


---

4. CategoryController.java

package org.policy.controller;

import lombok.RequiredArgsConstructor;
import org.policy.dto.CategoryDTO;
import org.policy.service.CategoryService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/categories")
@RequiredArgsConstructor
public class CategoryController {

    private final CategoryService categoryService;

    @PostMapping
    public ResponseEntity<CategoryDTO> create(@RequestBody CategoryDTO dto) {
        return ResponseEntity.ok(categoryService.create(dto));
    }

    @GetMapping
    public ResponseEntity<List<CategoryDTO>> getAll() {
        return ResponseEntity.ok(categoryService.getAll());
    }

    @GetMapping("/{id}")
    public ResponseEntity<CategoryDTO> getById(@PathVariable Long id) {
        return ResponseEntity.ok(categoryService.getById(id));
    }

    @PutMapping("/{id}")
    public ResponseEntity<CategoryDTO> update(@PathVariable Long id, @RequestBody CategoryDTO dto) {
        return ResponseEntity.ok(categoryService.update(id, dto));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable Long id) {
        categoryService.delete(id);
        return ResponseEntity.noContent().build();
    }
}


---

Let me know when you're ready for the Angular frontend part of Day 4 (Admin UI for Category form and listing with PrimeNG & Reactive Forms).

